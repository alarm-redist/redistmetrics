[{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://alarm-redist.github.io/redistmetrics/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christopher T. Kenny. Author, maintainer. Cory McCartan. Author. Ben Fifield. Author. Kosuke Imai. Author.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kenny C, McCartan C, Fifield B, Imai K (2021). redistmetrics: Redistricting Metrics. https://alarm-redist.github.io/redistmetrics/, https::/github.com/alarm-redist/redistmetrics/.","code":"@Manual{,   title = {redistmetrics: Redistricting Metrics},   author = {Christopher T. Kenny and Cory McCartan and Ben Fifield and Kosuke Imai},   year = {2021},   note = {https://alarm-redist.github.io/redistmetrics/, https::/github.com/alarm-redist/redistmetrics/}, }"},{"path":"https://alarm-redist.github.io/redistmetrics/index.html","id":"redistmetrics","dir":"","previous_headings":"","what":"Redistricting Metrics","title":"Redistricting Metrics","text":"redistmetrics one R packages developed maintained ALARM Project. redistmetrics provides back-end computation summary statistics redistricting plan. provides direct access point use methods redist without requiring redist objects.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Redistricting Metrics","text":"can install development version redistmetrics GitHub :","code":"if (!requireNamespace('remotes')) install.packages('remotes') remotes::install_github('alarm-redist/redistmetrics')"},{"path":"https://alarm-redist.github.io/redistmetrics/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Redistricting Metrics","text":"redistmetrics offers support 4 common input types examples , based New Hampshire: example based comp_polsby() Polsby Popper compactness, comp_polsby() can substituted implemented measure!","code":"library(redistmetrics) data(nh)"},{"path":"https://alarm-redist.github.io/redistmetrics/index.html","id":"single-plan","dir":"","previous_headings":"Example","what":"Single Plan:","title":"Redistricting Metrics","text":"single plan, can pass single plan input. also pass argument shp takes sf dataframe. r_2020 Republican proposal New Hampshire’s congressional districts. output numeric vector, entry output district. first district compactness 0.23 second district compactness 0.16. Now, ’re redistricting R, recommend using R package redist. case, redist_map object. can load example : redist maps, workflow identical!","code":"comp_polsby(plans = nh$r_2020, shp = nh) #> [1] 0.2324375 0.1582763 data(nh_map) comp_polsby(plans = nh_map$r_2020, shp = nh) #> [1] 0.2324375 0.1582763"},{"path":"https://alarm-redist.github.io/redistmetrics/index.html","id":"multiple-plans","dir":"","previous_headings":"Example","what":"Multiple Plans:","title":"Redistricting Metrics","text":"multiple plans, can pass either matrix plans redist_plans object plans. still need nh nh_map provide shapes. matrix, can compare nh_m matrix plans, column indicates plan. , process nearly identical. compute Polsby Popper compactness first two columns: Now got 4 outputs: 1 district x 2 plan x 2 plans. using redist, likely redist_plans object hides matrix attribute give familiar tidy workflow. , can similar process: First, load plans object (included example): benefit using redist_plans object can cleanly mutate using . shortcut: Now values cleanly held redist_plans object:","code":"data(nh_m) comp_polsby(plans = nh_m[, 1:2], shp = nh) #> [1] 0.1844955 0.1796426 0.2324375 0.1582763 data(nh_plans) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union nh_plans <- nh_plans %>% mutate(polsby = comp_polsby(plans = ., shp = nh)) #> Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1 head(nh_plans) #> # A tibble: 6 x 4 #>   draw   district total_pop polsby #>   <fct>     <int>     <dbl>  <dbl> #> 1 d_2020        1    688739  0.184 #> 2 d_2020        2    688790  0.180 #> 3 r_2020        1    688676  0.232 #> 4 r_2020        2    688853  0.158 #> 5 1             1    688961  0.235 #> 6 1             2    688568  0.349"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/by_plan.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorten District by Plan vector — by_plan","title":"Shorten District by Plan vector — by_plan","text":"x repeated district, returns plan level value. Otherwise returns x.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/by_plan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorten District by Plan vector — by_plan","text":"","code":"by_plan(x)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/by_plan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorten District by Plan vector — by_plan","text":"x summary statistic district level","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/by_plan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shorten District by Plan vector — by_plan","text":"x plan level subset x","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/by_plan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorten District by Plan vector — by_plan","text":"","code":"by_plan(letters) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" by_plan(rep(letters, each = 2)) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" #> [20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Boyce Clark Ratio — comp_bc","title":"Calculate Boyce Clark Ratio — comp_bc","text":"Calculate Boyce Clark Ratio","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Boyce Clark Ratio — comp_bc","text":"","code":"comp_bc(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_bc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Boyce Clark Ratio — comp_bc","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_bc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Boyce Clark Ratio — comp_bc","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_bc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Boyce Clark Ratio — comp_bc","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_bc(plans = nh$r_2020, shp = nh) #> [1] 0.7921350 0.8330235  # Or many plans: # \\donttest{ # slower, beware! comp_bc(plans = nh_m[, 3:5], shp = nh) #> [1] 0.8101242 0.9241602 0.8464224 0.8425670 0.8893711 0.8142303 # }"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_box_reock.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Box Reock Compactness — comp_box_reock","title":"Calculate Box Reock Compactness — comp_box_reock","text":"Box reock ratio area district area minimum bounding box (rotation). Scores bounded 0 1, 1 compact.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_box_reock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Box Reock Compactness — comp_box_reock","text":"","code":"comp_box_reock(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_box_reock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Box Reock Compactness — comp_box_reock","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_box_reock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Box Reock Compactness — comp_box_reock","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_box_reock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Box Reock Compactness — comp_box_reock","text":"","code":"#' data(nh) data(nh_m) # For a single plan: comp_box_reock(plans = nh$r_2020, shp = nh) #> [1] 0.5769441 0.4196260  # Or many plans: # \\donttest{ # slower, beware! comp_box_reock(plans = nh_m[, 3:5], shp = nh) #> [1] 0.4294522 0.5958500 0.6204649 0.5143926 0.6221746 0.3945339 # }"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_ch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Convex Hull Compactness — comp_ch","title":"Calculate Convex Hull Compactness — comp_ch","text":"Calculate Convex Hull Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_ch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Convex Hull Compactness — comp_ch","text":"","code":"comp_ch(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_ch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Convex Hull Compactness — comp_ch","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_ch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Convex Hull Compactness — comp_ch","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_ch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Convex Hull Compactness — comp_ch","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_ch(plans = nh$r_2020, shp = nh) #> [1] 0.6763964 0.6626738  # Or many plans: comp_ch(plans = nh_m[, 3:5], shp = nh) #> [1] 0.7088336 0.8065383 0.8821655 0.7185154 0.7885211 0.6458087"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_edges_rem.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Edges Removed Compactness — comp_edges_rem","title":"Calculate Edges Removed Compactness — comp_edges_rem","text":"Calculate Edges Removed Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_edges_rem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Edges Removed Compactness — comp_edges_rem","text":"","code":"comp_edges_rem(plans, shp, adj)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_edges_rem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Edges Removed Compactness — comp_edges_rem","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column adj zero-indexed adjacency list. required redist_map supplied shp.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_edges_rem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Edges Removed Compactness — comp_edges_rem","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_edges_rem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Edges Removed Compactness — comp_edges_rem","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_edges_rem(plans = nh$r_2020, shp = nh, nh$adj) #> [1] 73 73  # Or many plans: comp_edges_rem(plans = nh_m[, 3:5], shp = nh, nh$adj) #> [1] 49 49 43 43 63 63"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_fh.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Fryer Holden Compactness — comp_fh","title":"Calculate Fryer Holden Compactness — comp_fh","text":"Calculate Fryer Holden Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_fh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Fryer Holden Compactness — comp_fh","text":"","code":"comp_fh(plans, shp, total_pop, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_fh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Fryer Holden Compactness — comp_fh","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column total_pop numeric vector population every observation. epsg numeric EPSG code planarize . Default 3857. ncores TRUE","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_fh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Fryer Holden Compactness — comp_fh","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_fh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Fryer Holden Compactness — comp_fh","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_fh(plans = nh$r_2020, shp = nh, total_pop = pop) #> [1] 5.374691e+22 5.374691e+22  # Or many plans: comp_fh(plans = nh_m[, 3:5], shp = nh, pop) #>                                                                                #> 4.562516e+22 4.562516e+22 4.571258e+22 4.571258e+22 5.283598e+22 5.283598e+22"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_frac_kept.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Fraction Kept Compactness — comp_frac_kept","title":"Calculate Fraction Kept Compactness — comp_frac_kept","text":"Calculate Fraction Kept Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_frac_kept.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Fraction Kept Compactness — comp_frac_kept","text":"","code":"comp_frac_kept(plans, shp, adj)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_frac_kept.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Fraction Kept Compactness — comp_frac_kept","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column adj zero-indexed adjacency list. required redist_map supplied shp.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_frac_kept.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Fraction Kept Compactness — comp_frac_kept","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_frac_kept.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Fraction Kept Compactness — comp_frac_kept","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_frac_kept(plans = nh$r_2020, shp = nh, nh$adj) #> [1] 0.9584755 0.9584755  # Or many plans: comp_frac_kept(plans = nh_m[, 3:5], shp = nh, nh$adj) #> [1] 0.9721274 0.9721274 0.9755404 0.9755404 0.9641638 0.9641638"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_log_st.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Log Spanning Tree Compactness — comp_log_st","title":"Calculate Log Spanning Tree Compactness — comp_log_st","text":"Calculate Log Spanning Tree Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_log_st.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Log Spanning Tree Compactness — comp_log_st","text":"","code":"comp_log_st(plans, shp, counties = NULL, adj)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_log_st.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Log Spanning Tree Compactness — comp_log_st","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column counties column name shp containing counties adj zero-indexed adjacency list. required redist_map supplied shp.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_log_st.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Log Spanning Tree Compactness — comp_log_st","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_log_st.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Log Spanning Tree Compactness — comp_log_st","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_log_st(plans = nh$r_2020, shp = nh, counties = county, adj = nh$adj) #> [1] -Inf -Inf  # Or many plans: comp_log_st(plans = nh_m[, 3:5], shp = nh, counties = county, adj = nh$adj) #> [1] 387.2177 387.2177     -Inf     -Inf     -Inf     -Inf"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_lw.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Length Width Compactness — comp_lw","title":"Calculate Length Width Compactness — comp_lw","text":"Calculate Length Width Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_lw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Length Width Compactness — comp_lw","text":"","code":"comp_lw(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_lw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Length Width Compactness — comp_lw","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_lw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Length Width Compactness — comp_lw","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_lw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Length Width Compactness — comp_lw","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_lw(plans = nh$r_2020, shp = nh) #> [1] 0.9161576 0.5223455  # Or many plans: # \\donttest{ # slower, beware! comp_lw(plans = nh_m[, 3:5], shp = nh) #> [1] 0.5620598 0.7285358 0.7656927 0.4471162 0.7839045 0.5610703 # }"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_polsby.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Polsby Popper Compactness — comp_polsby","title":"Calculate Polsby Popper Compactness — comp_polsby","text":"Calculate Polsby Popper Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_polsby.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Polsby Popper Compactness — comp_polsby","text":"","code":"comp_polsby(   plans,   shp,   use_Rcpp,   perim_path,   perim_df,   epsg = 3857,   ncores = 1 )"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_polsby.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Polsby Popper Compactness — comp_polsby","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column use_Rcpp Logical. Use Rcpp? perim_path path perimeter tibble saved prep_perims() perim_df tibble perimeters prep_perims() epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_polsby.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Polsby Popper Compactness — comp_polsby","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_polsby.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Polsby Popper Compactness — comp_polsby","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_polsby(plans = nh$r_2020, shp = nh) #> [1] 0.2324375 0.1582763  # Or many plans: comp_polsby(plans = nh_m[, 3:5], shp = nh) #> [1] 0.2353849 0.3494821 0.4321098 0.2671355 0.3515524 0.1762865"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_reock.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Reock Compactness — comp_reock","title":"Calculate Reock Compactness — comp_reock","text":"Calculate Reock Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_reock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Reock Compactness — comp_reock","text":"","code":"comp_reock(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_reock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Reock Compactness — comp_reock","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_reock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Reock Compactness — comp_reock","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_reock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Reock Compactness — comp_reock","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_reock(plans = nh$r_2020, shp = nh) #> [1] 0.4444653 0.2502152  # Or many plans: comp_reock(plans = nh_m[, 3:5], shp = nh) #> [1] 0.2787073 0.4989468 0.4731140 0.2469171 0.5380798 0.2560460"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_schwartz.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Schwartzberg Compactness — comp_schwartz","title":"Calculate Schwartzberg Compactness — comp_schwartz","text":"Calculate Schwartzberg Compactness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_schwartz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Schwartzberg Compactness — comp_schwartz","text":"","code":"comp_schwartz(   plans,   shp,   use_Rcpp,   perim_path,   perim_df,   epsg = 3857,   ncores = 1 )"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_schwartz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Schwartzberg Compactness — comp_schwartz","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column use_Rcpp Logical. Use Rcpp? perim_path path perimeter tibble saved prep_perims() perim_df tibble perimeters prep_perims() epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_schwartz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Schwartzberg Compactness — comp_schwartz","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_schwartz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Schwartzberg Compactness — comp_schwartz","text":"","code":"data(nh) data(nh_m) # For a single plan: comp_schwartz(plans = nh$r_2020, shp = nh) #> [1] 0.4821177 0.3978395  # Or many plans: comp_schwartz(plans = nh_m[, 3:5], shp = nh) #> [1] 0.4851649 0.5911701 0.6573506 0.5168515 0.5929185 0.4198649"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_skew.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Skew Compactness — comp_skew","title":"Calculate Skew Compactness — comp_skew","text":"Skew defined ratio radii largest inscribed circle smallest bounding circle. Scores bounded 0 1, 1 compact.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_skew.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Skew Compactness — comp_skew","text":"","code":"comp_skew(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_skew.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Skew Compactness — comp_skew","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_skew.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Skew Compactness — comp_skew","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_skew.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Skew Compactness — comp_skew","text":"","code":"#' data(nh) data(nh_m) # For a single plan: comp_skew(plans = nh$r_2020, shp = nh) #> [1] 0.3640221 0.2481286  # Or many plans: # \\donttest{ # slower, beware! comp_skew(plans = nh_m[, 3:5], shp = nh) #> [1] 0.3131909 0.5480849 0.5209335 0.2940180 0.4475863 0.2739941 # }"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_x_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate X Symmetry Compactness — comp_x_sym","title":"Calculate X Symmetry Compactness — comp_x_sym","text":"X symmetry overlapping area shape projection x-axis.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_x_sym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate X Symmetry Compactness — comp_x_sym","text":"","code":"comp_x_sym(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_x_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate X Symmetry Compactness — comp_x_sym","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_x_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate X Symmetry Compactness — comp_x_sym","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_x_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate X Symmetry Compactness — comp_x_sym","text":"","code":"#' data(nh) data(nh_m) # For a single plan: comp_x_sym(plans = nh$r_2020, shp = nh) #> [1] 0.6995961 0.3436371  # Or many plans: # \\donttest{ # slower, beware! comp_x_sym(plans = nh_m[, 3:5], shp = nh) #> [1] 0.5495320 0.7308093 0.7176119 0.8156387 0.8097034 0.4609379 # }"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_y_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Y Symmetry Compactness — comp_y_sym","title":"Calculate Y Symmetry Compactness — comp_y_sym","text":"Y symmetry overlapping area shape projection y-axis.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_y_sym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Y Symmetry Compactness — comp_y_sym","text":"","code":"comp_y_sym(plans, shp, epsg = 3857, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_y_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Y Symmetry Compactness — comp_y_sym","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_y_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Y Symmetry Compactness — comp_y_sym","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/comp_y_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Y Symmetry Compactness — comp_y_sym","text":"","code":"#' data(nh) data(nh_m) # For a single plan: comp_y_sym(plans = nh$r_2020, shp = nh) #> [1] 0.7307813 0.4346136  # Or many plans: # \\donttest{ # slower, beware! comp_y_sym(plans = nh_m[, 3:5], shp = nh) #> [1] 0.6736826 0.7546261 0.8007610 0.6233465 0.8651681 0.6543634 # }"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/compet_talisman.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Talismanic Redistricting Competitiveness Metric — compet_talisman","title":"Compute Talismanic Redistricting Competitiveness Metric — compet_talisman","text":"Compute Talismanic Redistricting Competitiveness Metric","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/compet_talisman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Talismanic Redistricting Competitiveness Metric — compet_talisman","text":"","code":"compet_talisman(plans, shp, rvote, dvote, alpha = 1, beta = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/compet_talisman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Talismanic Redistricting Competitiveness Metric — compet_talisman","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column rvote unqouted name column shp group population dvote unqouted name column shp total population alpha Numeric scaling value beta Numeric scaling value","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/compet_talisman.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Talismanic Redistricting Competitiveness Metric — compet_talisman","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/compet_talisman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Talismanic Redistricting Competitiveness Metric — compet_talisman","text":"","code":"data(nh) data(nh_m) # For a single plan: compet_talisman(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.04955851 0.04955851  # Or many plans: compet_talisman(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.02600928 0.02600928 0.02421698 0.02421698 0.02318221 0.02318221"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_euc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Euclidean Distances — dist_euc","title":"Calculate Euclidean Distances — dist_euc","text":"Calculate Euclidean Distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_euc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Euclidean Distances — dist_euc","text":"","code":"dist_euc(plans, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_euc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Euclidean Distances — dist_euc","text":"plans redist_plans object plans_matrix row indicates district assignment column plan ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_euc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Euclidean Distances — dist_euc","text":"matrix plan distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_euc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Euclidean Distances — dist_euc","text":"","code":"data(nh) data(nh_m) # For a single plan (distance is trivial, 0): dist_euc(plans = nh$r_2020) #> [1] 0  # Or many plans: dist_euc(plans = nh_m[, 3:5]) #>          [,1]      [,2]      [,3] #> [1,]  0.00000 15.264338 16.492423 #> [2,] 15.26434  0.000000  9.949874 #> [3,] 16.49242  9.949874  0.000000"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_ham.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Hamming Distances — dist_ham","title":"Calculate Hamming Distances — dist_ham","text":"Calculate Hamming Distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_ham.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Hamming Distances — dist_ham","text":"","code":"dist_ham(plans, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_ham.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Hamming Distances — dist_ham","text":"plans redist_plans object plans_matrix row indicates district assignment column plan ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_ham.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Hamming Distances — dist_ham","text":"matrix plan distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_ham.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Hamming Distances — dist_ham","text":"","code":"data(nh) data(nh_m) # For a single plan (distance is trivial, 0): dist_ham(plans = nh$r_2020) #> [1] 0  # Or many plans: dist_ham(plans = nh_m[, 3:5]) #>      [,1] [,2] [,3] #> [1,]    0  233  272 #> [2,]  233    0   99 #> [3,]  272   99    0"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Variation of Information Distances — dist_info","title":"Calculate Variation of Information Distances — dist_info","text":"Calculate Variation Information Distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Variation of Information Distances — dist_info","text":"","code":"dist_info(plans, shp, total_pop, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Variation of Information Distances — dist_info","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column total_pop unqouted name column shp total population ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Variation of Information Distances — dist_info","text":"matrix plan distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Variation of Information Distances — dist_info","text":"","code":"data(nh) data(nh_m) # For a single plan (distance is trivial, 0): dist_info(plans = nh$r_2020, shp = nh, total_pop = pop) #> [1] 0  # Or many plans: dist_info(plans = nh_m[, 3:5], shp = nh, total_pop = pop) #>           [,1]     [,2]      [,3] #> [1,] 0.0000000 1.211885 0.9347048 #> [2,] 1.2118850 0.000000 1.2261166 #> [3,] 0.9347048 1.226117 0.0000000"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_man.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Manhattan Distances — dist_man","title":"Calculate Manhattan Distances — dist_man","text":"Calculate Manhattan Distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_man.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Manhattan Distances — dist_man","text":"","code":"dist_man(plans, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_man.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Manhattan Distances — dist_man","text":"plans redist_plans object plans_matrix row indicates district assignment column plan ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_man.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Manhattan Distances — dist_man","text":"matrix plan distances","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/dist_man.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Manhattan Distances — dist_man","text":"","code":"data(nh) data(nh_m) # For a single plan (distance is trivial, 0): dist_man(plans = nh$r_2020) #> [1] 0  # Or many plans: dist_man(plans = nh_m[, 3:5]) #>      [,1] [,2] [,3] #> [1,]    0  233  272 #> [2,]  233    0   99 #> [3,]  272   99    0"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/inc_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Incumbent Pairings — inc_pairs","title":"Count Incumbent Pairings — inc_pairs","text":"Count number incumbents paired least one incumbent.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/inc_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Incumbent Pairings — inc_pairs","text":"","code":"inc_pairs(plans, shp, inc)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/inc_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Incumbent Pairings — inc_pairs","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column inc unqouted name logical column shp indicating incumbents live","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/inc_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Incumbent Pairings — inc_pairs","text":"vector number incumbents paired","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/inc_pairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Incumbent Pairings — inc_pairs","text":"","code":"data(nh) data(nh_m) # Use incumbent data: fake_inc <- rep(FALSE, nrow(nh)) fake_inc[3:4] <- TRUE  # For a single plan: inc_pairs(plans = nh$r_2020, shp = nh, inc = fake_inc) #> [1] 1 1  # Or many plans: inc_pairs(plans = nh_m[, 3:5], shp = nh, inc = fake_inc) #>              #> 1 1 1 1 0 0"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/list_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Functions Matching a Prefix — list_fn","title":"Return Functions Matching a Prefix — list_fn","text":"package uses prefixes function correspond type measure. function returns functions","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/list_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Functions Matching a Prefix — list_fn","text":"","code":"list_fn(prefix)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/list_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Functions Matching a Prefix — list_fn","text":"prefix character prefix functions return","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/list_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Functions Matching a Prefix — list_fn","text":"character vector functions","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/list_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return Functions Matching a Prefix — list_fn","text":"","code":"list_fn('part_') #>  [1] \"part_bias\"          \"part_decl\"          \"part_dseats\"        #>  [4] \"part_dvs\"           \"part_egap\"          \"part_egap_ep\"       #>  [7] \"part_lopsided_wins\" \"part_mean_median\"   \"part_resp\"          #> [10] \"part_rmd\"           \"part_sscd\"          \"part_tau_gap\""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh.html","id":null,"dir":"Reference","previous_headings":"","what":"New Hampshire Election and Demographic Data — nh","title":"New Hampshire Election and Demographic Data — nh","text":"data set contains demographic, election, geographic information 326 voting tabulation districts New Hampshire 2020.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Hampshire Election and Demographic Data — nh","text":"","code":"data(\"nh\")"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"New Hampshire Election and Demographic Data — nh","text":"tibble 326 rows 45 columns GEOID20: 2020 VTD GEOID state: state name county: county name vtd: VTD portion GEOID pop: total population pop_hisp: Hispanic population pop_white: White, Hispanic population pop_black: Black, Hispanic population pop_aian: American Indian Alaska Native, Hispanic population pop_asian: Asian, Hispanic population pop_nhpi: Native Hawaiian Pacific Islander, Hispanic population pop_other: race, Hispanic population pop_two: multi-race, Hispanic population vap: total voting-age population vap_hisp: Hispanic voting-age population vap_white: White, Hispanic voting-age population vap_black: Black, Hispanic voting-age population vap_aian: American Indian Alaska Native, Hispanic voting-age population vap_asian: Asian, Hispanic voting-age population vap_nhpi: Native Hawaiian Pacific Islander, Hispanic voting-age population vap_other: race, Hispanic voting-age population vap_two: multi-race, Hispanic voting-age population pre_16_rep_tru: Votes Republican president 2016 pre_16_dem_cli: Votes Democratic president 2016 uss_16_rep_ayo: Votes Republican senate 2016 uss_16_dem_has: Votes Democratic senate 2016 gov_16_rep_sun: Votes Republican governor 2016 gov_16_dem_van: Votes Democratic governor 2016 gov_18_rep_sun: Votes Republican governor 2018 gov_18_dem_kel: Votes Democratic governor 2018 pre_20_dem_bid: Votes Democratic president 2020 pre_20_rep_tru: Votes Republican president 2020 uss_20_dem_sha: Votes Democratic senate 2020 uss_20_rep_mes: Votes Republican senate 2020 gov_20_dem_fel: Votes Democratic governor 2020 gov_20_rep_sun: Votes Republican governor 2020 arv_16: Average Republican vote 2016 adv_16: Average Democratic vote 2016 arv_18: Average Republican vote 2018 adv_18: Average Democratic vote 2018 arv_20: Average Republican vote 2020 adv_20: Average Democratic vote 2020 nrv: Normal Republican vote ndv: Normal Democratic vote geometry: sf geometry, simplified size using rmapshaper r_2020: Republican proposed plan 2020 Congressional districts d_2020: Democratic proposed plan 2020 Congressional districts adj: zero-indexed adjacency graph","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"New Hampshire Election and Demographic Data — nh","text":"Voting Election Science Team, 2020, \"2020 Precinct-Level Election Results\", https://doi.org/10.7910/DVN/K7760H, Harvard Dataverse, V23 Voting Election Science Team, 2018, \"2016 Precinct-Level Election Results\", https://doi.org/10.7910/DVN/NH5S2I, Harvard Dataverse, V71 Voting Election Science Team, 2019, \"2018 Precinct-Level Election Results\", https://doi.org/10.7910/DVN/UBKYRU, Harvard Dataverse, V48 Kenny & McCartan (2021, Aug. 10). ALARM Project: 2020 Redistricting Data Files. Retrieved https://github.com/alarm-redist/census-2020/","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Hampshire Election and Demographic Data — nh","text":"","code":"data(nh)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistricting Plans for New Hampshire as matrix — nh_m","title":"Redistricting Plans for New Hampshire as matrix — nh_m","text":"data set contains two reference plans (d_2020 r_2020) 50 simulated plans New Hampshire, based 2020 demographics, simulated population tolerance 0.05%.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistricting Plans for New Hampshire as matrix — nh_m","text":"","code":"data(\"nh_m\")"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_m.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Redistricting Plans for New Hampshire as matrix — nh_m","text":"matrix 52 columns 326 rows column plan","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_m.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redistricting Plans for New Hampshire as matrix — nh_m","text":"","code":"data(nh_m)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_map.html","id":null,"dir":"Reference","previous_headings":"","what":"New Hampshire Election and Demographic Data as a redist_map — nh_map","title":"New Hampshire Election and Demographic Data as a redist_map — nh_map","text":"data set contains demographic, election, geographic information 326 voting tabulation districts New Hampshire 2020.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New Hampshire Election and Demographic Data as a redist_map — nh_map","text":"","code":"data(\"nh_map\")"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"New Hampshire Election and Demographic Data as a redist_map — nh_map","text":"redist_map 326 rows 45 columns GEOID20: 2020 VTD GEOID state: state name county: county name vtd: VTD portion GEOID pop: total population pop_hisp: Hispanic population pop_white: White, Hispanic population pop_black: Black, Hispanic population pop_aian: American Indian Alaska Native, Hispanic population pop_asian: Asian, Hispanic population pop_nhpi: Native Hawaiian Pacific Islander, Hispanic population pop_other: race, Hispanic population pop_two: multi-race, Hispanic population vap: total voting-age population vap_hisp: Hispanic voting-age population vap_white: White, Hispanic voting-age population vap_black: Black, Hispanic voting-age population vap_aian: American Indian Alaska Native, Hispanic voting-age population vap_asian: Asian, Hispanic voting-age population vap_nhpi: Native Hawaiian Pacific Islander, Hispanic voting-age population vap_other: race, Hispanic voting-age population vap_two: multi-race, Hispanic voting-age population pre_16_rep_tru: Votes Republican president 2016 pre_16_dem_cli: Votes Democratic president 2016 uss_16_rep_ayo: Votes Republican senate 2016 uss_16_dem_has: Votes Democratic senate 2016 gov_16_rep_sun: Votes Republican governor 2016 gov_16_dem_van: Votes Democratic governor 2016 gov_18_rep_sun: Votes Republican governor 2018 gov_18_dem_kel: Votes Democratic governor 2018 pre_20_dem_bid: Votes Democratic president 2020 pre_20_rep_tru: Votes Republican president 2020 uss_20_dem_sha: Votes Democratic senate 2020 uss_20_rep_mes: Votes Republican senate 2020 gov_20_dem_fel: Votes Democratic governor 2020 gov_20_rep_sun: Votes Republican governor 2020 arv_16: Average Republican vote 2016 adv_16: Average Democratic vote 2016 arv_18: Average Republican vote 2018 adv_18: Average Democratic vote 2018 arv_20: Average Republican vote 2020 adv_20: Average Democratic vote 2020 nrv: Normal Republican vote ndv: Normal Democratic vote r_2020: Republican proposed plan 2020 Congressional districts d_2020: Democratic proposed plan 2020 Congressional districts adj: zero-indexed adjacency graph geometry: sf geometry, simplified size using rmapshaper","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_map.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"New Hampshire Election and Demographic Data as a redist_map — nh_map","text":"Voting Election Science Team, 2020, \"2020 Precinct-Level Election Results\", https://doi.org/10.7910/DVN/K7760H, Harvard Dataverse, V23 Voting Election Science Team, 2018, \"2016 Precinct-Level Election Results\", https://doi.org/10.7910/DVN/NH5S2I, Harvard Dataverse, V71 Voting Election Science Team, 2019, \"2018 Precinct-Level Election Results\", https://doi.org/10.7910/DVN/UBKYRU, Harvard Dataverse, V48 Kenny & McCartan (2021, Aug. 10). ALARM Project: 2020 Redistricting Data Files. Retrieved https://github.com/alarm-redist/census-2020/","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New Hampshire Election and Demographic Data as a redist_map — nh_map","text":"","code":"data(nh_map)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_plans.html","id":null,"dir":"Reference","previous_headings":"","what":"Redistricting Plans for New Hampshire as redist_plans — nh_plans","title":"Redistricting Plans for New Hampshire as redist_plans — nh_plans","text":"data set contains two reference plans (d_2020 r_2020) 50 simulated plans New Hampshire, based 2020 demographics, simulated population tolerance 0.05%.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_plans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redistricting Plans for New Hampshire as redist_plans — nh_plans","text":"","code":"data(\"nh_plans\")"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_plans.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Redistricting Plans for New Hampshire as redist_plans — nh_plans","text":"redist_plans 104 rows 3 columns draw: factor identifying reference plans (d_2020 r_2020) 50 simulted plans district: district number (1 2) total_pop: total population district","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/nh_plans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Redistricting Plans for New Hampshire as redist_plans — nh_plans","text":"","code":"data(nh_plans)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Partisan Bias — part_bias","title":"Calculate Partisan Bias — part_bias","text":"Calculate Partisan Bias","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Partisan Bias — part_bias","text":"","code":"part_bias(plans, shp, dvote, rvote, v = 0.5)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Partisan Bias — part_bias","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population v vote share calculate bias . Numeric. Default 0.5.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_bias.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Partisan Bias — part_bias","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Partisan Bias — part_bias","text":"","code":"data(nh) data(nh_m) # For a single plan: part_bias(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0 0  # Or many plans: part_bias(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0 0 0 0 0 0"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_decl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Declination — part_decl","title":"Calculate Declination — part_decl","text":"Calculate Declination","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_decl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Declination — part_decl","text":"","code":"part_decl(plans, shp, dvote, rvote, normalize = FALSE)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_decl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Declination — part_decl","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population normalize Default FALSE. Translate score angle?","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_decl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Declination — part_decl","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_decl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Declination — part_decl","text":"","code":"data(nh) data(nh_m) # For a single plan: part_decl(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] -0.04679648 -0.04679648  # Or many plans: part_decl(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] -0.05236926 -0.05236926 -0.04490268 -0.04490268 -0.05106782 -0.05106782"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dseats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Democratic Seats — part_dseats","title":"Calculate Democratic Seats — part_dseats","text":"Calculate Democratic Seats","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dseats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Democratic Seats — part_dseats","text":"","code":"part_dseats(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dseats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Democratic Seats — part_dseats","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dseats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Democratic Seats — part_dseats","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dseats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Democratic Seats — part_dseats","text":"","code":"data(nh) data(nh_m) # For a single plan: part_dseats(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 1 1  # Or many plans: part_dseats(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 1 1 1 1 1 1"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Democratic Vote Share — part_dvs","title":"Calculate Democratic Vote Share — part_dvs","text":"Calculate Democratic Vote Share","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Democratic Vote Share — part_dvs","text":"","code":"part_dvs(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Democratic Vote Share — part_dvs","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dvs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Democratic Vote Share — part_dvs","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_dvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Democratic Vote Share — part_dvs","text":"","code":"data(nh) data(nh_m) # For a single plan: part_dvs(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.4387424 0.5378594  # Or many plans: part_dvs(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.5129170 0.4608984 0.5129913 0.4645573 0.4640508 0.5104153"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Efficiency Gap — part_egap","title":"Calculate Efficiency Gap — part_egap","text":"Calculate Efficiency Gap","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Efficiency Gap — part_egap","text":"","code":"part_egap(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Efficiency Gap — part_egap","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Efficiency Gap — part_egap","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Efficiency Gap — part_egap","text":"","code":"data(nh) data(nh_m) # For a single plan: part_egap(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.02007106 0.02007106  # Or many plans: part_egap(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.043094074 0.043094074 0.005968205 0.005968205 0.038383805 0.038383805"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap_ep.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Efficiency Gap (Equal Population Assumption) — part_egap_ep","title":"Calculate Efficiency Gap (Equal Population Assumption) — part_egap_ep","text":"Calculate Efficiency Gap (Equal Population Assumption)","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap_ep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Efficiency Gap (Equal Population Assumption) — part_egap_ep","text":"","code":"part_egap_ep(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap_ep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Efficiency Gap (Equal Population Assumption) — part_egap_ep","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap_ep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Efficiency Gap (Equal Population Assumption) — part_egap_ep","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_egap_ep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Efficiency Gap (Equal Population Assumption) — part_egap_ep","text":"","code":"data(nh) data(nh_m) # For a single plan: part_egap_ep(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.02339824 0.02339824  # Or many plans: part_egap_ep(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.02618463 0.02618463 0.02245134 0.02245134 0.02553391 0.02553391"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_lopsided_wins.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Lopsided Wins — part_lopsided_wins","title":"Calculate Lopsided Wins — part_lopsided_wins","text":"Calculate Lopsided Wins","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_lopsided_wins.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Lopsided Wins — part_lopsided_wins","text":"","code":"part_lopsided_wins(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_lopsided_wins.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Lopsided Wins — part_lopsided_wins","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_lopsided_wins.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Lopsided Wins — part_lopsided_wins","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_lopsided_wins.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Lopsided Wins — part_lopsided_wins","text":"","code":"data(nh) data(nh_m) # For a single plan: part_lopsided_wins(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] -0.02339824 -0.02339824  # Or many plans: part_lopsided_wins(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] -0.02618463 -0.02618463 -0.02245134 -0.02245134 -0.02553391 -0.02553391"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_mean_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Mean Median Score — part_mean_median","title":"Calculate Mean Median Score — part_mean_median","text":"Calculate Mean Median Score","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_mean_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Mean Median Score — part_mean_median","text":"","code":"part_mean_median(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_mean_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Mean Median Score — part_mean_median","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_mean_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Mean Median Score — part_mean_median","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_mean_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Mean Median Score — part_mean_median","text":"","code":"data(nh) data(nh_m) # zero for the two district case: # For a single plan: part_mean_median(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0 0  # Or many plans: part_mean_median(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0 0 0 0 0 0"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_resp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Responsiveness — part_resp","title":"Calculate Responsiveness — part_resp","text":"Calculate Responsiveness","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_resp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Responsiveness — part_resp","text":"","code":"part_resp(plans, shp, dvote, rvote, v = 0.5, bandwidth = FALSE)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_resp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Responsiveness — part_resp","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population v vote share calculate bias . Numeric. Default 0.5. bandwidth Defaults 0.01. value 0 1 step size estimate slope.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_resp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Responsiveness — part_resp","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_resp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Responsiveness — part_resp","text":"","code":"data(nh) data(nh_m) # For a single plan: part_resp(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] NaN NaN  # Or many plans: part_resp(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] NaN NaN NaN NaN NaN NaN"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Ranked Margin Deviation — part_rmd","title":"Calculate Ranked Margin Deviation — part_rmd","text":"Calculate Ranked Margin Deviation","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Ranked Margin Deviation — part_rmd","text":"","code":"part_rmd(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Ranked Margin Deviation — part_rmd","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Ranked Margin Deviation — part_rmd","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Ranked Margin Deviation — part_rmd","text":"","code":"data(nh) data(nh_m) # For a single plan: part_rmd(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0 0  # Or many plans: part_rmd(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.05809681 0.05809681 0.02708405 0.02708405 0.03642753 0.03642753"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_sscd.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Smoothed Seat Count Deviation — part_sscd","title":"Calculate Smoothed Seat Count Deviation — part_sscd","text":"Calculate Smoothed Seat Count Deviation","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_sscd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Smoothed Seat Count Deviation — part_sscd","text":"","code":"part_sscd(plans, shp, dvote, rvote)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_sscd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Smoothed Seat Count Deviation — part_sscd","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_sscd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Smoothed Seat Count Deviation — part_sscd","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_sscd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Smoothed Seat Count Deviation — part_sscd","text":"","code":"data(nh) data(nh_m) # For a single plan: part_sscd(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.3819666 0.3819666  # Or many plans: part_sscd(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.2483146 0.2483146 0.2682273 0.2682273 0.2246389 0.2246389"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_tau_gap.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Tau Gap — part_tau_gap","title":"Calculate Tau Gap — part_tau_gap","text":"Calculate Tau Gap","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_tau_gap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Tau Gap — part_tau_gap","text":"","code":"part_tau_gap(plans, shp, dvote, rvote, tau = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_tau_gap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Tau Gap — part_tau_gap","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column dvote unqouted name column shp total population rvote unqouted name column shp group population tau non-negative numeric calculating Tau Gap. Defaults 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_tau_gap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Tau Gap — part_tau_gap","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/part_tau_gap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Tau Gap — part_tau_gap","text":"","code":"data(nh) data(nh_m) # For a single plan: part_tau_gap(plans = nh$r_2020, shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.009276655 0.009276655  # Or many plans: part_tau_gap(plans = nh_m[, 3:5], shp = nh, rvote = nrv, dvote = ndv) #> [1] 0.005448348 0.005448348 0.004349630 0.004349630 0.004735459 0.004735459"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/prep_perims.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep Polsby Popper Perimeter Tibble — prep_perims","title":"Prep Polsby Popper Perimeter Tibble — prep_perims","text":"Replaces redist.prep.polsbypopper","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/prep_perims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep Polsby Popper Perimeter Tibble — prep_perims","text":"","code":"prep_perims(shp, epsg = 3857, perim_path, ncores = 1)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/prep_perims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep Polsby Popper Perimeter Tibble — prep_perims","text":"shp redist_map object tibble sf geometry column epsg numeric EPSG code planarize . Default 3857. perim_path path save rds ncores numeric. Number cores use. Default 1.","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/prep_perims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep Polsby Popper Perimeter Tibble — prep_perims","text":"tibble perimeters lengths","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/prep_perims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prep Polsby Popper Perimeter Tibble — prep_perims","text":"","code":"data(nh) prep_perims(nh) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1 #>      origin touching         edge #> 1        -1       20  78568.88296 #> 2        -1       21  52575.11474 #> 3        -1       22  17508.35953 #> 4        -1       23  39421.70857 #> 5        -1       24  31087.58311 #> 6        -1       34  55600.60778 #> 7        -1       37  30700.06214 #> 8        -1       39  33598.95785 #> 9        -1       42  58687.08715 #> 10       -1       52  32998.66905 #> 11       -1       53  40242.12150 #> 12       -1       60  58102.98667 #> 13       -1       61  47442.47823 #> 14       -1       62  33594.72557 #> 15       -1       63  15195.02415 #> 16       -1       68  20415.36779 #> 17       -1       69  36009.56693 #> 18       -1       72   7671.55324 #> 19       -1       73  26217.23038 #> 20       -1       74  50589.98945 #> 21       -1       77  33575.68973 #> 22       -1       81  43346.28199 #> 23       -1       88  49883.39943 #> 24       -1       93  55153.69329 #> 25       -1       96 339136.70903 #> 26       -1       99  40148.66249 #> 27       -1      100  36310.67848 #> 28       -1      102  35602.18152 #> 29       -1      103  57637.29426 #> 30       -1      104  62364.40459 #> 31       -1      106  12586.52074 #> 32       -1      110  25233.22404 #> 33       -1      124  40592.29257 #> 34       -1      125  55663.45596 #> 35       -1      129  36169.86842 #> 36       -1      134  74524.45880 #> 37       -1      137  41592.30191 #> 38       -1      138  57001.55290 #> 39       -1      140  39908.09718 #> 40       -1      141  36626.24717 #> 41       -1      154  19022.77483 #> 42       -1      162  23627.36628 #> 43       -1      163  12205.51135 #> 44       -1      178  27996.45345 #> 45       -1      186  12644.69591 #> 46       -1      188   4510.81996 #> 47       -1      189   4962.95832 #> 48       -1      190   7562.81491 #> 49       -1      192  33240.65940 #> 50       -1      193  46109.89216 #> 51       -1      238  37410.22010 #> 52       -1      239  14953.37451 #> 53       -1      261  19535.68272 #> 54       -1      263  20618.94528 #> 55       -1      268  13002.63080 #> 56       -1      269  24656.08904 #> 57       -1      270  11067.41915 #> 58       -1      274   4439.79694 #> 59       -1      276  45712.18285 #> 60       -1      277  30802.98893 #> 61       -1      279  24045.12391 #> 62       -1      282 115283.53422 #> 63       -1      286   9447.82667 #> 64       -1      287  19596.63216 #> 65       -1      295  64820.14738 #> 66       -1      297  34298.71325 #> 67       -1      301  11629.82617 #> 68       -1      303  22073.85196 #> 69       -1      304  12027.49473 #> 70       -1      308  11592.94110 #> 71       -1      311  72148.94206 #> 72       -1      313  30400.93264 #> 73       -1      314   9451.55666 #> 74       -1      315  35457.38705 #> 75       -1      322  37531.96324 #> 76        1        2  39733.54565 #> 77        1        5  52763.89584 #> 78        1        6  40235.43656 #> 79        1       29   1055.58458 #> 80        1       33  20558.29267 #> 81        1       35  41055.79370 #> 82        1      296  70366.94961 #> 83        2        1  39733.54565 #> 84        2        6  31797.25008 #> 85        2      232  37535.91284 #> 86        2      309  32757.87232 #> 87        3        5  17760.34634 #> 88        3        6  32603.22077 #> 89        3        9   6147.22552 #> 90        3       10  10870.36573 #> 91        3       15  10632.55994 #> 92        3       16  23230.12394 #> 93        3      229  25559.19931 #> 94        4       13  29583.02400 #> 95        4       14  20150.91021 #> 96        4       29  34015.94502 #> 97        4      127  39203.70709 #> 98        5        1  52763.89584 #> 99        5        3  17760.34634 #> 100       5        6  23790.38911 #> 101       5        7   7886.26516 #> 102       5        8   8831.72551 #> 103       5       10   8808.14898 #> 104       5       11   3136.69570 #> 105       5       12  22731.79518 #> 106       5       13  32473.36183 #> 107       5       29    226.92767 #> 108       6        1  40235.43656 #> 109       6        2  31797.25008 #> 110       6        3  32603.22077 #> 111       6        5  23790.38911 #> 112       6      205   5394.13239 #> 113       6      227  34799.24632 #> 114       7        5   7886.26516 #> 115       7        8   7828.66879 #> 116       7        9  13615.62931 #> 117       7       12  29009.24636 #> 118       7       13  44461.24649 #> 119       8        5   8831.72551 #> 120       8        7   7828.66879 #> 121       8        9   4262.53139 #> 122       8       11   4279.67452 #> 123       8       12   8928.83382 #> 124       9        3   6147.22552 #> 125       9        7  13615.62931 #> 126       9        8   4262.53139 #> 127       9       10   4935.93161 #> 128       9       11   1208.88036 #> 129       9       13    322.61462 #> 130       9       15   8476.54970 #> 131      10        3  10870.36573 #> 132      10        5   8808.14898 #> 133      10        9   4935.93161 #> 134      10       11   4341.60641 #> 135      11        5   3136.69570 #> 136      11        8   4279.67452 #> 137      11        9   1208.88036 #> 138      11       10   4341.60641 #> 139      12        5  22731.79518 #> 140      12        7  29009.24636 #> 141      12        8   8928.83382 #> 142      13        4  29583.02400 #> 143      13        5  32473.36183 #> 144      13        7  44461.24649 #> 145      13        9    322.61462 #> 146      13       14  44097.07332 #> 147      13       15  36702.71945 #> 148      13       29  35004.32824 #> 149      14        4  20150.91021 #> 150      14       13  44097.07332 #> 151      14       15  23357.73888 #> 152      14      109  17913.34811 #> 153      14      113  19699.29252 #> 154      14      114  43345.83231 #> 155      14      224  10955.55128 #> 156      15        3  10632.55994 #> 157      15        9   8476.54970 #> 158      15       13  36702.71945 #> 159      15       14  23357.73888 #> 160      15       16  32479.43708 #> 161      15      220  15172.79391 #> 162      15      222  13161.29234 #> 163      15      224   9771.58563 #> 164      16        3  23230.12394 #> 165      16       15  32479.43708 #> 166      16      222  10031.14576 #> 167      16      229  21586.13389 #> 168      17       18  53430.57653 #> 169      17       21  22889.44035 #> 170      17       25   6659.03291 #> 171      17       28  25491.27184 #> 172      17       31   2803.08187 #> 173      17       32  39359.40520 #> 174      17      135   7753.76713 #> 175      17      147  31547.34347 #> 176      18       17  53430.57653 #> 177      18       20  20164.65345 #> 178      18       21  29524.91789 #> 179      18       25  17370.15987 #> 180      18       26  13847.00485 #> 181      18       27  58141.51111 #> 182      18       85  11029.59834 #> 183      18       98   8892.65744 #> 184      18      135  19447.24934 #> 185      19       34  38232.30744 #> 186      19       35  27955.07281 #> 187      19      294  22812.14749 #> 188      19      296  24471.25064 #> 189      20       18  20164.65345 #> 190      20       21  22946.65161 #> 191      20       27  40579.21553 #> 192      20       68  40677.64197 #> 193      21       17  22889.44035 #> 194      21       18  29524.91789 #> 195      21       20  22946.65161 #> 196      21       22  56314.26552 #> 197      21       25  11540.71442 #> 198      21       28  24394.32791 #> 199      22       21  56314.26552 #> 200      22       24  26140.91670 #> 201      22       28  26522.62288 #> 202      23       24  27407.63042 #> 203      23       30  62521.65451 #> 204      23       34  12674.19808 #> 205      24       22  26140.91670 #> 206      24       23  27407.63042 #> 207      24       28  28513.71859 #> 208      24       30  42392.51616 #> 209      25       17   6659.03291 #> 210      25       18  17370.15987 #> 211      25       21  11540.71442 #> 212      26       18  13847.00485 #> 213      26       67  16679.17299 #> 214      26       70   5587.72397 #> 215      26       76   5988.17976 #> 216      26       85  31722.68829 #> 217      26      112  19037.51631 #> 218      26      135  46074.89714 #> 219      27       18  58141.51111 #> 220      27       20  40579.21553 #> 221      27       68  38067.64486 #> 222      27       95   8718.70898 #> 223      27       98  36022.46501 #> 224      28       17  25491.27184 #> 225      28       21  24394.32791 #> 226      28       22  26522.62288 #> 227      28       24  28513.71859 #> 228      28       30   1710.37174 #> 229      28       32  34531.24352 #> 230      29        1   1055.58458 #> 231      29        4  34015.94502 #> 232      29        5    226.92767 #> 233      29       13  35004.32824 #> 234      29       30   9287.44569 #> 235      29       31  54145.96948 #> 236      29       32  13228.67315 #> 237      29       33  69195.37616 #> 238      29      127   1410.65167 #> 239      30       23  62521.65451 #> 240      30       24  42392.51616 #> 241      30       28   1710.37174 #> 242      30       29   9287.44569 #> 243      30       32  32719.42326 #> 244      30       33  36852.49225 #> 245      30       34  19546.51627 #> 246      30       35  42626.52680 #> 247      31       17   2803.08187 #> 248      31       29  54145.96948 #> 249      31       32  46534.50782 #> 250      31      115  29137.50778 #> 251      31      127  13173.31958 #> 252      31      145   6690.56132 #> 253      31      147  54048.92570 #> 254      32       17  39359.40520 #> 255      32       28  34531.24352 #> 256      32       29  13228.67315 #> 257      32       30  32719.42326 #> 258      32       31  46534.50782 #> 259      33        1  20558.29267 #> 260      33       29  69195.37616 #> 261      33       30  36852.49225 #> 262      33       35  45517.09611 #> 263      34       19  38232.30744 #> 264      34       23  12674.19808 #> 265      34       30  19546.51627 #> 266      34       35   1508.57163 #> 267      34      294  17481.52544 #> 268      34      295  26851.03706 #> 269      35        1  41055.79370 #> 270      35       19  27955.07281 #> 271      35       30  42626.52680 #> 272      35       33  45517.09611 #> 273      35       34   1508.57163 #> 274      35      296  15410.30599 #> 275      36       40  17566.36625 #> 276      36       50  36502.12323 #> 277      36       57  13750.68103 #> 278      36       60  25846.97071 #> 279      36      310  18763.97172 #> 280      36      319  24583.90580 #> 281      37       42  20944.52645 #> 282      37       48  10262.06093 #> 283      37       58  25552.12553 #> 284      37       61  42579.73785 #> 285      37       62  23683.04155 #> 286      38       41  41548.72354 #> 287      38       43  39420.51976 #> 288      38       49  20376.28851 #> 289      38      194  20000.46483 #> 290      39       43  16450.26138 #> 291      39       52  26268.75814 #> 292      39       53  28295.62743 #> 293      39       59  29331.22037 #> 294      40       36  17566.36625 #> 295      40       45  12468.51720 #> 296      40       46    251.44994 #> 297      40       50  13237.16390 #> 298      40       55   8432.65588 #> 299      40       56  33402.65555 #> 300      40       57  27724.48653 #> 301      41       38  41548.72354 #> 302      41       49   4134.66375 #> 303      41       51  31392.15249 #> 304      41       54  11088.58674 #> 305      41      160  27666.60077 #> 306      41      194   3975.54872 #> 307      42       37  20944.52645 #> 308      42       62  46591.13684 #> 309      43       38  39420.51976 #> 310      43       39  16450.26138 #> 311      43       49   8167.59592 #> 312      43       53  31316.69374 #> 313      43       59  13193.09188 #> 314      43      194  11542.33330 #> 315      43      195  16382.70995 #> 316      44       45  10721.41201 #> 317      44       46     50.51296 #> 318      44       48   8775.10394 #> 319      44       58   8371.43069 #> 320      45       40  12468.51720 #> 321      45       44  10721.41201 #> 322      45       46  24788.27622 #> 323      45       49   8110.09984 #> 324      45       54  25210.42593 #> 325      45       56  15552.04180 #> 326      45       58   5640.56020 #> 327      46       40    251.44994 #> 328      46       44     50.51296 #> 329      46       45  24788.27622 #> 330      46       47  31133.64095 #> 331      46       48     51.56967 #> 332      46       57  11684.04602 #> 333      47       46  31133.64095 #> 334      47       48  27342.29849 #> 335      47       57   2898.39479 #> 336      48       37  10262.06093 #> 337      48       44   8775.10394 #> 338      48       46     51.56967 #> 339      48       47  27342.29849 #> 340      48       57   4316.12634 #> 341      48       58  16327.87723 #> 342      48       61  22776.28688 #> 343      49       38  20376.28851 #> 344      49       41   4134.66375 #> 345      49       43   8167.59592 #> 346      49       45   8110.09984 #> 347      49       54  18490.80228 #> 348      49       58  17051.44831 #> 349      49       59  27509.32435 #> 350      50       36  36502.12323 #> 351      50       40  13237.16390 #> 352      50       55  20719.31711 #> 353      50      310  11544.87846 #> 354      50      320  17021.42213 #> 355      50      326  19203.38372 #> 356      51       41  31392.15249 #> 357      51       54  11150.55930 #> 358      51       55  37410.16752 #> 359      51       56  13957.45404 #> 360      51      151   5040.67037 #> 361      51      160  14338.53696 #> 362      52       39  26268.75814 #> 363      52       58  24819.07183 #> 364      52       59  12700.17527 #> 365      52       62  33624.14471 #> 366      53       39  28295.62743 #> 367      53       43  31316.69374 #> 368      53      192  28112.11063 #> 369      53      195   8175.49490 #> 370      54       41  11088.58674 #> 371      54       45  25210.42593 #> 372      54       49  18490.80228 #> 373      54       51  11150.55930 #> 374      54       56  15276.75672 #> 375      55       40   8432.65588 #> 376      55       50  20719.31711 #> 377      55       51  37410.16752 #> 378      55       56  17363.34323 #> 379      55      151  23468.75384 #> 380      55      199  18167.12432 #> 381      55      326  37489.60337 #> 382      56       40  33402.65555 #> 383      56       45  15552.04180 #> 384      56       51  13957.45404 #> 385      56       54  15276.75672 #> 386      56       55  17363.34323 #> 387      57       36  13750.68103 #> 388      57       40  27724.48653 #> 389      57       46  11684.04602 #> 390      57       47   2898.39479 #> 391      57       48   4316.12634 #> 392      57       60  19363.97747 #> 393      57       61  14162.62764 #> 394      58       37  25552.12553 #> 395      58       44   8371.43069 #> 396      58       45   5640.56020 #> 397      58       48  16327.87723 #> 398      58       49  17051.44831 #> 399      58       52  24819.07183 #> 400      58       59  19927.77674 #> 401      58       62  29245.89152 #> 402      59       39  29331.22037 #> 403      59       43  13193.09188 #> 404      59       49  27509.32435 #> 405      59       52  12700.17527 #> 406      59       58  19927.77674 #> 407      60       36  25846.97071 #> 408      60       57  19363.97747 #> 409      60       61  26721.24325 #> 410      60      311   5408.51325 #> 411      60      319  24774.01357 #> 412      61       37  42579.73785 #> 413      61       48  22776.28688 #> 414      61       57  14162.62764 #> 415      61       60  26721.24325 #> 416      62       37  23683.04155 #> 417      62       42  46591.13684 #> 418      62       52  33624.14471 #> 419      62       58  29245.89152 #> 420      63       72  20152.52325 #> 421      63       78   9499.01873 #> 422      63       96  29823.15518 #> 423      63       99  29632.15087 #> 424      64       65  27428.60040 #> 425      64       66   5955.99794 #> 426      64       83  16073.74068 #> 427      64       87  32868.29197 #> 428      64       91  30865.89642 #> 429      64       97  36607.08035 #> 430      65       64  27428.60040 #> 431      65       66  13501.66489 #> 432      65       91  29855.81978 #> 433      65      104  17091.02400 #> 434      66       64   5955.99794 #> 435      66       65  13501.66489 #> 436      66       83   6585.42699 #> 437      66      104  13099.02445 #> 438      67       26  16679.17299 #> 439      67       70   6443.05798 #> 440      67       71  19894.33928 #> 441      67       75  21460.74822 #> 442      67       76  18816.75688 #> 443      68       20  40677.64197 #> 444      68       27  38067.64486 #> 445      68       83   8408.81552 #> 446      68       84  15283.77873 #> 447      68       90  11830.27220 #> 448      68       95  16993.06085 #> 449      68      100  37978.34577 #> 450      69       80  37199.98958 #> 451      69       81  38865.52750 #> 452      69       91  28509.61554 #> 453      69      104  10961.43312 #> 454      70       26   5587.72397 #> 455      70       67   6443.05798 #> 456      70       75  21929.08964 #> 457      70       86  28125.43245 #> 458      70       89  27785.52135 #> 459      70      107  34637.65258 #> 460      70      112  72235.37474 #> 461      71       67  19894.33928 #> 462      71       75   6109.92921 #> 463      71       76   3215.18434 #> 464      71       89   2571.99764 #> 465      71       98  13738.03348 #> 466      71      105  10731.03417 #> 467      72       63  20152.52325 #> 468      72       78   9486.21818 #> 469      72       79  17317.59816 #> 470      72       96  94676.70908 #> 471      72      102  52270.69184 #> 472      73       74  46910.74112 #> 473      73       79  25158.14508 #> 474      73      102  54555.48099 #> 475      74       73  46910.74112 #> 476      74       79  12796.73354 #> 477      74       82   9874.69201 #> 478      74       94  22086.51243 #> 479      74      103  41337.65972 #> 480      75       67  21460.74822 #> 481      75       70  21929.08964 #> 482      75       71   6109.92921 #> 483      75       89  15216.65944 #> 484      76       26   5988.17976 #> 485      76       67  18816.75688 #> 486      76       71   3215.18434 #> 487      76       85   8326.70055 #> 488      76       98  45613.50613 #> 489      77       88  13896.52829 #> 490      77      107  37715.59111 #> 491      77      112   3073.12060 #> 492      77      134  32479.29027 #> 493      78       63   9499.01873 #> 494      78       72   9486.21818 #> 495      78       79  39617.10072 #> 496      78       99  35938.10528 #> 497      78      106  11033.39409 #> 498      79       72  17317.59816 #> 499      79       73  25158.14508 #> 500      79       74  12796.73354 #> 501      79       78  39617.10072 #> 502      79       82   6258.16477 #> 503      79       92  30976.40261 #> 504      79      102  22039.38776 #> 505      79      106  11213.91217 #> 506      80       69  37199.98958 #> 507      80       81   6954.91032 #> 508      80       91  35490.09786 #> 509      80       92  29826.53721 #> 510      80       94  15888.76773 #> 511      80      101  21496.53869 #> 512      81       69  38865.52750 #> 513      81       80   6954.91032 #> 514      81       92  42603.81495 #> 515      81      106  44622.67768 #> 516      82       74   9874.69201 #> 517      82       79   6258.16477 #> 518      82       92  13378.88987 #> 519      82       94  13247.00130 #> 520      83       64  16073.74068 #> 521      83       66   6585.42699 #> 522      83       68   8408.81552 #> 523      83       90  10701.44086 #> 524      83       97  39589.15255 #> 525      83      100  35427.43483 #> 526      83      104   4254.82169 #> 527      83      105   3777.29917 #> 528      84       68  15283.77873 #> 529      84       90   8883.01254 #> 530      84       95   4953.06954 #> 531      84      105   9582.70555 #> 532      85       18  11029.59834 #> 533      85       26  31722.68829 #> 534      85       76   8326.70055 #> 535      85       98  25003.83199 #> 536      86       70  28125.43245 #> 537      86       87  25348.17364 #> 538      86       88  30345.89281 #> 539      86       89  25929.71264 #> 540      86       97  21748.58886 #> 541      86      107  33127.57662 #> 542      87       64  32868.29197 #> 543      87       86  25348.17364 #> 544      87       88  21299.80227 #> 545      87       91  18183.36469 #> 546      87       97  13637.28995 #> 547      87      101  33906.95691 #> 548      88       77  13896.52829 #> 549      88       86  30345.89281 #> 550      88       87  21299.80227 #> 551      88       93  37016.31433 #> 552      88      101   2404.35601 #> 553      88      107  25679.88645 #> 554      89       70  27785.52135 #> 555      89       71   2571.99764 #> 556      89       75  15216.65944 #> 557      89       86  25929.71264 #> 558      89       97  39938.53351 #> 559      89      105  34761.18078 #> 560      90       68  11830.27220 #> 561      90       83  10701.44086 #> 562      90       84   8883.01254 #> 563      90      105   9895.84741 #> 564      91       64  30865.89642 #> 565      91       65  29855.81978 #> 566      91       69  28509.61554 #> 567      91       80  35490.09786 #> 568      91       87  18183.36469 #> 569      91      101  12868.65417 #> 570      91      104  32561.59553 #> 571      92       79  30976.40261 #> 572      92       80  29826.53721 #> 573      92       81  42603.81495 #> 574      92       82  13378.88987 #> 575      92       94  27869.93907 #> 576      93       88  37016.31433 #> 577      93      101  55725.21716 #> 578      93      103  19090.73367 #> 579      94       74  22086.51243 #> 580      94       80  15888.76773 #> 581      94       82  13247.00130 #> 582      94       92  27869.93907 #> 583      94      101  23664.61408 #> 584      94      103  46894.92669 #> 585      95       27   8718.70898 #> 586      95       68  16993.06085 #> 587      95       84   4953.06954 #> 588      95       98  23498.65253 #> 589      95      105   1227.06433 #> 590      96       63  29823.15518 #> 591      96       72  94676.70908 #> 592      97       64  36607.08035 #> 593      97       83  39589.15255 #> 594      97       86  21748.58886 #> 595      97       87  13637.28995 #> 596      97       89  39938.53351 #> 597      98       18   8892.65744 #> 598      98       27  36022.46501 #> 599      98       71  13738.03348 #> 600      98       76  45613.50613 #> 601      98       85  25003.83199 #> 602      98       95  23498.65253 #> 603      98      105  30556.98440 #> 604      99       63  29632.15087 #> 605      99       78  35938.10528 #> 606      99      106  33394.23978 #> 607     100       68  37978.34577 #> 608     100       83  35427.43483 #> 609     100      104  37329.23162 #> 610     101       80  21496.53869 #> 611     101       87  33906.95691 #> 612     101       88   2404.35601 #> 613     101       91  12868.65417 #> 614     101       93  55725.21716 #> 615     101       94  23664.61408 #> 616     101      103  22713.92970 #> 617     102       72  52270.69184 #> 618     102       73  54555.48099 #> 619     102       79  22039.38776 #> 620     103       74  41337.65972 #> 621     103       93  19090.73367 #> 622     103       94  46894.92669 #> 623     103      101  22713.92970 #> 624     104       65  17091.02400 #> 625     104       66  13099.02445 #> 626     104       69  10961.43312 #> 627     104       83   4254.82169 #> 628     104       91  32561.59553 #> 629     104      100  37329.23162 #> 630     105       71  10731.03417 #> 631     105       83   3777.29917 #> 632     105       84   9582.70555 #> 633     105       89  34761.18078 #> 634     105       90   9895.84741 #> 635     105       95   1227.06433 #> 636     105       98  30556.98440 #> 637     106       78  11033.39409 #> 638     106       79  11213.91217 #> 639     106       81  44622.67768 #> 640     106       99  33394.23978 #> 641     107       70  34637.65258 #> 642     107       77  37715.59111 #> 643     107       86  33127.57662 #> 644     107       88  25679.88645 #> 645     107      112  28607.27907 #> 646     108      114  36684.63273 #> 647     108      122   9802.05683 #> 648     108      123  11260.26657 #> 649     108      126  23613.40439 #> 650     108      139  36646.71426 #> 651     108      217  32077.10665 #> 652     108      224  22003.65382 #> 653     109       14  17913.34811 #> 654     109      113  12433.18024 #> 655     109      127  36659.22023 #> 656     109      142  12543.86431 #> 657     110      125  36834.88556 #> 658     110      128  32702.59224 #> 659     110      133   3873.86409 #> 660     110      136  23238.91541 #> 661     110      138  17157.51634 #> 662     111      118  18736.91939 #> 663     111      125  43873.92016 #> 664     111      128  16226.86790 #> 665     111      146  37075.56347 #> 666     111      149  31984.41497 #> 667     112       26  19037.51631 #> 668     112       70  72235.37474 #> 669     112       77   3073.12060 #> 670     112      107  28607.27907 #> 671     112      121  58260.13428 #> 672     112      132  31381.61950 #> 673     112      134  33837.02830 #> 674     112      135   3053.27813 #> 675     112      144  14314.91574 #> 676     113       14  19699.29252 #> 677     113      109  12433.18024 #> 678     113      114  44159.10872 #> 679     113      126   7635.36928 #> 680     113      142  23074.39209 #> 681     114       14  43345.83231 #> 682     114      108  36684.63273 #> 683     114      113  44159.10872 #> 684     114      126  10306.28833 #> 685     114      224   9327.12806 #> 686     115       31  29137.50778 #> 687     115      119   9674.40005 #> 688     115      127  33522.32574 #> 689     115      142  24510.16048 #> 690     115      143  20603.53012 #> 691     115      145  48238.69871 #> 692     116      117  35218.54732 #> 693     116      120  40915.41804 #> 694     116      122   6979.03393 #> 695     116      124  37643.10094 #> 696     116      137   4873.95571 #> 697     116      139  34873.23856 #> 698     117      116  35218.54732 #> 699     117      123  36335.38302 #> 700     117      137  37617.99992 #> 701     117      148  33966.31700 #> 702     118      111  18736.91939 #> 703     118      121  16904.70900 #> 704     118      128  34578.23397 #> 705     118      132  33902.95680 #> 706     118      144   8534.42105 #> 707     118      149   9135.17664 #> 708     119      115   9674.40005 #> 709     119      143  29391.89292 #> 710     119      145  17690.75137 #> 711     119      146  24640.63231 #> 712     119      149  19780.86489 #> 713     120      116  40915.41804 #> 714     120      122  24927.61813 #> 715     120      130  10960.92544 #> 716     120      131  18622.39997 #> 717     120      318  33848.77433 #> 718     120      322  10654.32247 #> 719     120      323  10520.49345 #> 720     121      112  58260.13428 #> 721     121      118  16904.70900 #> 722     121      132  75027.34849 #> 723     121      144  30130.35861 #> 724     122      108   9802.05683 #> 725     122      116   6979.03393 #> 726     122      120  24927.61813 #> 727     122      139  29091.19711 #> 728     122      217  29315.72062 #> 729     122      237   2144.69093 #> 730     122      323  38806.17459 #> 731     123      108  11260.26657 #> 732     123      117  36335.38302 #> 733     123      126  28471.22983 #> 734     123      139  12874.26753 #> 735     123      142  18918.68424 #> 736     123      143  36532.69191 #> 737     124      116  37643.10094 #> 738     124      129   6427.58106 #> 739     124      130   3601.44242 #> 740     124      131  30175.92884 #> 741     124      137  35892.25210 #> 742     125      110  36834.88556 #> 743     125      111  43873.92016 #> 744     125      141  41629.75479 #> 745     126      108  23613.40439 #> 746     126      113   7635.36928 #> 747     126      114  10306.28833 #> 748     126      123  28471.22983 #> 749     126      142  21313.54015 #> 750     127        4  39203.70709 #> 751     127       29   1410.65167 #> 752     127       31  13173.31958 #> 753     127      109  36659.22023 #> 754     127      115  33522.32574 #> 755     127      142  14734.91666 #> 756     128      110  32702.59224 #> 757     128      111  16226.86790 #> 758     128      118  34578.23397 #> 759     128      133  24073.17784 #> 760     128      144   8386.82226 #> 761     129      124   6427.58106 #> 762     129      130  39747.25426 #> 763     129      322  15898.85367 #> 764     130      120  10960.92544 #> 765     130      124   3601.44242 #> 766     130      129  39747.25426 #> 767     130      131  43333.08147 #> 768     130      322  16776.61732 #> 769     131      120  18622.39997 #> 770     131      124  30175.92884 #> 771     131      130  43333.08147 #> 772     132      112  31381.61950 #> 773     132      118  33902.95680 #> 774     132      121  75027.34849 #> 775     132      135 113500.99208 #> 776     132      145   3927.66434 #> 777     132      149  38672.98334 #> 778     133      110   3873.86409 #> 779     133      128  24073.17784 #> 780     133      134  19481.64761 #> 781     133      136  35297.85688 #> 782     133      144  32610.44307 #> 783     134       77  32479.29027 #> 784     134      112  33837.02830 #> 785     134      133  19481.64761 #> 786     134      136  19514.29879 #> 787     134      138  16128.81644 #> 788     135       17   7753.76713 #> 789     135       18  19447.24934 #> 790     135       26  46074.89714 #> 791     135      112   3053.27813 #> 792     135      132 113500.99208 #> 793     135      145  21059.65262 #> 794     135      147  61421.62643 #> 795     136      110  23238.91541 #> 796     136      133  35297.85688 #> 797     136      134  19514.29879 #> 798     136      138  39579.71283 #> 799     137      116   4873.95571 #> 800     137      117  37617.99992 #> 801     137      124  35892.25210 #> 802     137      140  39717.44307 #> 803     138      110  17157.51634 #> 804     138      134  16128.81644 #> 805     138      136  39579.71283 #> 806     139      108  36646.71426 #> 807     139      116  34873.23856 #> 808     139      122  29091.19711 #> 809     139      123  12874.26753 #> 810     140      137  39717.44307 #> 811     140      141  36981.86648 #> 812     140      148  33936.25201 #> 813     141      125  41629.75479 #> 814     141      140  36981.86648 #> 815     141      146  29740.67808 #> 816     141      148   3169.65353 #> 817     142      109  12543.86431 #> 818     142      113  23074.39209 #> 819     142      115  24510.16048 #> 820     142      123  18918.68424 #> 821     142      126  21313.54015 #> 822     142      127  14734.91666 #> 823     142      143  15932.91326 #> 824     143      115  20603.53012 #> 825     143      119  29391.89292 #> 826     143      123  36532.69191 #> 827     143      142  15932.91326 #> 828     143      148  36668.78153 #> 829     144      112  14314.91574 #> 830     144      118   8534.42105 #> 831     144      121  30130.35861 #> 832     144      128   8386.82226 #> 833     144      133  32610.44307 #> 834     145       31   6690.56132 #> 835     145      115  48238.69871 #> 836     145      119  17690.75137 #> 837     145      132   3927.66434 #> 838     145      135  21059.65262 #> 839     145      147  32002.07975 #> 840     145      149  50756.67087 #> 841     146      111  37075.56347 #> 842     146      119  24640.63231 #> 843     146      141  29740.67808 #> 844     146      148  38198.39230 #> 845     146      149  20149.14341 #> 846     147       17  31547.34347 #> 847     147       31  54048.92570 #> 848     147      135  61421.62643 #> 849     147      145  32002.07975 #> 850     148      117  33966.31700 #> 851     148      140  33936.25201 #> 852     148      141   3169.65353 #> 853     148      143  36668.78153 #> 854     148      146  38198.39230 #> 855     149      111  31984.41497 #> 856     149      118   9135.17664 #> 857     149      119  19780.86489 #> 858     149      132  38672.98334 #> 859     149      145  50756.67087 #> 860     149      146  20149.14341 #> 861     150      152  25129.58361 #> 862     150      162  13376.40892 #> 863     150      179  35779.69395 #> 864     150      180  33710.17728 #> 865     150      181  31824.74762 #> 866     150      191   8421.60188 #> 867     151       51   5040.67037 #> 868     151       55  23468.75384 #> 869     151      153  16525.23718 #> 870     151      155  19902.81321 #> 871     151      160  31597.69886 #> 872     151      161  20161.51147 #> 873     151      199  15979.85278 #> 874     152      150  25129.58361 #> 875     152      157  32499.15685 #> 876     152      173   9092.44241 #> 877     152      174  12730.97893 #> 878     152      175  10921.06601 #> 879     152      179  32032.40158 #> 880     152      191  10920.49787 #> 881     153      151  16525.23718 #> 882     153      155  10880.91072 #> 883     153      156  17718.26127 #> 884     153      158  16932.61894 #> 885     153      160  11660.33754 #> 886     154      162  25510.47743 #> 887     154      178  23110.51153 #> 888     154      180  34303.68039 #> 889     155      151  19902.81321 #> 890     155      153  10880.91072 #> 891     155      156  25120.01564 #> 892     155      161  14937.42091 #> 893     155      197  31883.94966 #> 894     155      223  12679.51246 #> 895     156      153  17718.26127 #> 896     156      155  25120.01564 #> 897     156      158  27432.27618 #> 898     156      165  16428.97009 #> 899     156      191  20693.36886 #> 900     156      197  12208.94024 #> 901     157      152  32499.15685 #> 902     157      175   5905.28858 #> 903     157      176   1258.01170 #> 904     157      177  17627.74675 #> 905     157      191  24035.87845 #> 906     157      197   7760.24812 #> 907     157      218  33524.82939 #> 908     157      225   7143.37174 #> 909     158      153  16932.61894 #> 910     158      156  27432.27618 #> 911     158      160  19404.69432 #> 912     158      165  34278.86377 #> 913     158      194  38890.18528 #> 914     158      196   7226.56335 #> 915     159      178  30901.96904 #> 916     159      192  22450.77139 #> 917     159      196   2943.74262 #> 918     159      198   5822.67302 #> 919     160       41  27666.60077 #> 920     160       51  14338.53696 #> 921     160      151  31597.69886 #> 922     160      153  11660.33754 #> 923     160      158  19404.69432 #> 924     160      194  15983.81801 #> 925     161      151  20161.51147 #> 926     161      155  14937.42091 #> 927     161      199  27124.12014 #> 928     161      204  26503.72564 #> 929     161      223  36820.28525 #> 930     161      326  16555.99831 #> 931     162      150  13376.40892 #> 932     162      154  25510.47743 #> 933     162      179   4122.24980 #> 934     162      180  14973.61891 #> 935     162      182  24233.71218 #> 936     162      186  13925.85597 #> 937     163      164  19872.40662 #> 938     163      184  12243.82946 #> 939     163      188  24881.35246 #> 940     163      193  32079.54168 #> 941     163      260  22151.34819 #> 942     163      281   5101.81866 #> 943     164      163  19872.40662 #> 944     164      173   5964.84368 #> 945     164      179  41000.95840 #> 946     164      184   2044.02774 #> 947     164      260  24240.08156 #> 948     165      156  16428.97009 #> 949     165      158  34278.86377 #> 950     165      180  12664.66582 #> 951     165      181  28191.71944 #> 952     165      191  13474.97947 #> 953     165      196  12584.95992 #> 954     165      198  34282.25983 #> 955     166      167   8182.77233 #> 956     166      168   3494.79117 #> 957     166      177  10302.95151 #> 958     166      225  17642.64677 #> 959     167      166   8182.77233 #> 960     167      168   3641.07388 #> 961     167      169   9438.33199 #> 962     167      171   9184.18479 #> 963     167      225  13101.95339 #> 964     167      240    112.59616 #> 965     168      166   3494.79117 #> 966     168      167   3641.07388 #> 967     168      169   2801.48249 #> 968     168      170   2925.92524 #> 969     168      172   1455.67403 #> 970     168      174   4024.08294 #> 971     168      175   4100.20401 #> 972     168      176   3258.58882 #> 973     168      177   5390.31244 #> 974     169      167   9438.33199 #> 975     169      168   2801.48249 #> 976     169      170   9897.26656 #> 977     169      171   5368.89737 #> 978     170      168   2925.92524 #> 979     170      169   9897.26656 #> 980     170      171   2034.21844 #> 981     170      172   8660.30732 #> 982     171      167   9184.18479 #> 983     171      169   5368.89737 #> 984     171      170   2034.21844 #> 985     171      172   3828.17563 #> 986     171      173  17325.06344 #> 987     171      240  22906.83418 #> 988     171      260   3696.63519 #> 989     172      168   1455.67403 #> 990     172      170   8660.30732 #> 991     172      171   3828.17563 #> 992     172      173   5649.10650 #> 993     172      174   4057.48902 #> 994     173      152   9092.44241 #> 995     173      164   5964.84368 #> 996     173      171  17325.06344 #> 997     173      172   5649.10650 #> 998     173      174  16101.26374 #> 999     173      179   2374.18823 #> 1000    173      260  33005.38103 #> 1001    174      152  12730.97893 #> 1002    174      168   4024.08294 #> 1003    174      172   4057.48902 #> 1004    174      173  16101.26374 #> 1005    174      175   2998.42963 #> 1006    175      152  10921.06601 #> 1007    175      157   5905.28858 #> 1008    175      168   4100.20401 #> 1009    175      174   2998.42963 #> 1010    175      176  10341.47908 #> 1011    176      157   1258.01170 #> 1012    176      168   3258.58882 #> 1013    176      175  10341.47908 #> 1014    176      177   9020.93185 #> 1015    177      157  17627.74675 #> 1016    177      166  10302.95151 #> 1017    177      168   5390.31244 #> 1018    177      176   9020.93185 #> 1019    177      225  13621.19273 #> 1020    178      154  23110.51153 #> 1021    178      159  30901.96904 #> 1022    178      180  10436.72946 #> 1023    178      192   6056.19863 #> 1024    178      198  19002.71327 #> 1025    179      150  35779.69395 #> 1026    179      152  32032.40158 #> 1027    179      162   4122.24980 #> 1028    179      164  41000.95840 #> 1029    179      173   2374.18823 #> 1030    179      182   3444.20134 #> 1031    179      183  13957.35493 #> 1032    179      184  12925.21924 #> 1033    180      150  33710.17728 #> 1034    180      154  34303.68039 #> 1035    180      162  14973.61891 #> 1036    180      165  12664.66582 #> 1037    180      178  10436.72946 #> 1038    180      181   7565.26799 #> 1039    180      198  19743.66261 #> 1040    181      150  31824.74762 #> 1041    181      165  28191.71944 #> 1042    181      180   7565.26799 #> 1043    181      191  26149.15612 #> 1044    182      162  24233.71218 #> 1045    182      179   3444.20134 #> 1046    182      183  17369.10327 #> 1047    182      185   4579.50245 #> 1048    182      186  13319.51562 #> 1049    183      179  13957.35493 #> 1050    183      182  17369.10327 #> 1051    183      184  15693.58084 #> 1052    183      185   4871.87539 #> 1053    184      163  12243.82946 #> 1054    184      164   2044.02774 #> 1055    184      179  12925.21924 #> 1056    184      183  15693.58084 #> 1057    184      185   5557.34943 #> 1058    184      188   3831.02934 #> 1059    185      182   4579.50245 #> 1060    185      183   4871.87539 #> 1061    185      184   5557.34943 #> 1062    185      186   5566.55010 #> 1063    185      187   8878.39324 #> 1064    185      188   3676.55318 #> 1065    186      162  13925.85597 #> 1066    186      182  13319.51562 #> 1067    186      185   5566.55010 #> 1068    186      187   2996.95177 #> 1069    186      190  16440.30437 #> 1070    187      185   8878.39324 #> 1071    187      186   2996.95177 #> 1072    187      188   6644.96104 #> 1073    187      189   3008.12119 #> 1074    187      190   7554.13199 #> 1075    188      163  24881.35246 #> 1076    188      184   3831.02934 #> 1077    188      185   3676.55318 #> 1078    188      187   6644.96104 #> 1079    188      189  14928.21359 #> 1080    189      187   3008.12119 #> 1081    189      188  14928.21359 #> 1082    189      190  14793.74785 #> 1083    190      186  16440.30437 #> 1084    190      187   7554.13199 #> 1085    190      189  14793.74785 #> 1086    191      150   8421.60188 #> 1087    191      152  10920.49787 #> 1088    191      156  20693.36886 #> 1089    191      157  24035.87845 #> 1090    191      165  13474.97947 #> 1091    191      181  26149.15612 #> 1092    191      197  33960.14932 #> 1093    192       53  28112.11063 #> 1094    192      159  22450.77139 #> 1095    192      178   6056.19863 #> 1096    192      195  11716.30530 #> 1097    192      196  21275.21600 #> 1098    193      163  32079.54168 #> 1099    193      276  12898.62161 #> 1100    193      281  25664.72193 #> 1101    194       38  20000.46483 #> 1102    194       41   3975.54872 #> 1103    194       43  11542.33330 #> 1104    194      158  38890.18528 #> 1105    194      160  15983.81801 #> 1106    194      195  25626.62867 #> 1107    194      196  14282.21200 #> 1108    195       43  16382.70995 #> 1109    195       53   8175.49490 #> 1110    195      192  11716.30530 #> 1111    195      194  25626.62867 #> 1112    195      196  23503.47991 #> 1113    196      158   7226.56335 #> 1114    196      159   2943.74262 #> 1115    196      165  12584.95992 #> 1116    196      192  21275.21600 #> 1117    196      194  14282.21200 #> 1118    196      195  23503.47991 #> 1119    196      198  28527.13174 #> 1120    197      155  31883.94966 #> 1121    197      156  12208.94024 #> 1122    197      157   7760.24812 #> 1123    197      191  33960.14932 #> 1124    197      218  36542.39714 #> 1125    197      223  21502.66354 #> 1126    197      226  17904.17943 #> 1127    198      159   5822.67302 #> 1128    198      165  34282.25983 #> 1129    198      178  19002.71327 #> 1130    198      180  19743.66261 #> 1131    198      196  28527.13174 #> 1132    199       55  18167.12432 #> 1133    199      151  15979.85278 #> 1134    199      161  27124.12014 #> 1135    199      326  12067.60305 #> 1136    200      201   1930.69970 #> 1137    200      211  10244.05288 #> 1138    200      212   2198.02953 #> 1139    200      213  14415.06458 #> 1140    200      214  12211.51820 #> 1141    200      218  46867.03990 #> 1142    200      225  20906.81903 #> 1143    200      226   6952.53887 #> 1144    200      231  14934.25361 #> 1145    201      200   1930.69970 #> 1146    201      219  20968.85265 #> 1147    201      225  30343.37858 #> 1148    201      231  27434.77618 #> 1149    201      249  24294.06191 #> 1150    202      217  14029.17673 #> 1151    202      220  23996.34957 #> 1152    202      224  24195.21698 #> 1153    202      233  41972.98224 #> 1154    202      235   5280.72402 #> 1155    202      237  32866.44699 #> 1156    203      205  33357.95126 #> 1157    203      207  18092.19774 #> 1158    203      220   6328.56982 #> 1159    203      229   8410.12480 #> 1160    203      233  13944.99224 #> 1161    203      236  39075.31242 #> 1162    204      161  26503.72564 #> 1163    204      223   8781.62978 #> 1164    204      228  31276.13822 #> 1165    204      234   7726.86126 #> 1166    204      235  27800.72753 #> 1167    204      326  32462.64452 #> 1168    205        6   5394.13239 #> 1169    205      203  33357.95126 #> 1170    205      207   3946.21417 #> 1171    205      216  16430.72040 #> 1172    205      227  42332.34089 #> 1173    205      229  49527.92821 #> 1174    206      219  26974.61473 #> 1175    206      227  30772.79543 #> 1176    206      231  24893.63435 #> 1177    206      232  25659.22153 #> 1178    207      203  18092.19774 #> 1179    207      205   3946.21417 #> 1180    207      208  18218.33074 #> 1181    207      209  20186.89815 #> 1182    207      216   8129.03419 #> 1183    207      226   3587.79799 #> 1184    207      236   5324.93857 #> 1185    208      207  18218.33074 #> 1186    208      209  21035.89193 #> 1187    209      207  20186.89815 #> 1188    209      208  21035.89193 #> 1189    209      210   5656.95525 #> 1190    209      211  24518.84112 #> 1191    209      216  21093.06147 #> 1192    209      226  14270.72463 #> 1193    210      209   5656.95525 #> 1194    210      211   4591.79827 #> 1195    210      212   3295.88992 #> 1196    210      214   4335.89766 #> 1197    210      216   5145.08631 #> 1198    211      200  10244.05288 #> 1199    211      209  24518.84112 #> 1200    211      210   4591.79827 #> 1201    211      212   8905.25136 #> 1202    211      213  16108.79154 #> 1203    211      226  20877.59302 #> 1204    212      200   2198.02953 #> 1205    212      210   3295.88992 #> 1206    212      211   8905.25136 #> 1207    212      213  13947.41073 #> 1208    212      214  11156.67489 #> 1209    213      200  14415.06458 #> 1210    213      211  16108.79154 #> 1211    213      212  13947.41073 #> 1212    214      200  12211.51820 #> 1213    214      210   4335.89766 #> 1214    214      212  11156.67489 #> 1215    214      215  16819.96152 #> 1216    214      216   7508.19056 #> 1217    214      231  33977.70996 #> 1218    215      214  16819.96152 #> 1219    215      216  10741.00205 #> 1220    216      205  16430.72040 #> 1221    216      207   8129.03419 #> 1222    216      209  21093.06147 #> 1223    216      210   5145.08631 #> 1224    216      214   7508.19056 #> 1225    216      215  10741.00205 #> 1226    216      227  27397.10579 #> 1227    216      231   4245.76363 #> 1228    217      108  32077.10665 #> 1229    217      122  29315.72062 #> 1230    217      202  14029.17673 #> 1231    217      224  30669.35498 #> 1232    217      237  43836.73108 #> 1233    218      157  33524.82939 #> 1234    218      197  36542.39714 #> 1235    218      200  46867.03990 #> 1236    218      225   2885.88325 #> 1237    218      226  10936.13255 #> 1238    219      201  20968.85265 #> 1239    219      206  26974.61473 #> 1240    219      231  14820.79909 #> 1241    219      232  27203.36633 #> 1242    219      249  23194.06444 #> 1243    219      267  12798.48347 #> 1244    220       15  15172.79391 #> 1245    220      202  23996.34957 #> 1246    220      203   6328.56982 #> 1247    220      221  23732.37483 #> 1248    220      222  11766.98514 #> 1249    220      224  12534.68767 #> 1250    220      229   7639.24167 #> 1251    220      233  29259.14447 #> 1252    221      220  23732.37483 #> 1253    221      222  22460.84876 #> 1254    221      229   1323.44219 #> 1255    222       15  13161.29234 #> 1256    222       16  10031.14576 #> 1257    222      220  11766.98514 #> 1258    222      221  22460.84876 #> 1259    222      229  17172.48367 #> 1260    223      155  12679.51246 #> 1261    223      161  36820.28525 #> 1262    223      197  21502.66354 #> 1263    223      204   8781.62978 #> 1264    223      226  36650.67159 #> 1265    223      235  25841.53350 #> 1266    224       14  10955.55128 #> 1267    224       15   9771.58563 #> 1268    224      108  22003.65382 #> 1269    224      114   9327.12806 #> 1270    224      202  24195.21698 #> 1271    224      217  30669.35498 #> 1272    224      220  12534.68767 #> 1273    225      157   7143.37174 #> 1274    225      166  17642.64677 #> 1275    225      167  13101.95339 #> 1276    225      177  13621.19273 #> 1277    225      200  20906.81903 #> 1278    225      201  30343.37858 #> 1279    225      218   2885.88325 #> 1280    225      240  15047.65137 #> 1281    225      242  24158.07065 #> 1282    226      197  17904.17943 #> 1283    226      200   6952.53887 #> 1284    226      207   3587.79799 #> 1285    226      209  14270.72463 #> 1286    226      211  20877.59302 #> 1287    226      218  10936.13255 #> 1288    226      223  36650.67159 #> 1289    226      235  17139.74034 #> 1290    226      236  17880.88933 #> 1291    227        6  34799.24632 #> 1292    227      205  42332.34089 #> 1293    227      206  30772.79543 #> 1294    227      216  27397.10579 #> 1295    227      231   2276.31681 #> 1296    227      232  14940.59717 #> 1297    228      204  31276.13822 #> 1298    228      230   9458.84989 #> 1299    228      234  41738.47100 #> 1300    228      317  32057.94762 #> 1301    228      324  17020.92531 #> 1302    229        3  25559.19931 #> 1303    229       16  21586.13389 #> 1304    229      203   8410.12480 #> 1305    229      205  49527.92821 #> 1306    229      220   7639.24167 #> 1307    229      221   1323.44219 #> 1308    229      222  17172.48367 #> 1309    230      228   9458.84989 #> 1310    230      234  29409.98816 #> 1311    230      237  38184.34724 #> 1312    230      323  23017.67085 #> 1313    230      324  23192.01410 #> 1314    231      200  14934.25361 #> 1315    231      201  27434.77618 #> 1316    231      206  24893.63435 #> 1317    231      214  33977.70996 #> 1318    231      216   4245.76363 #> 1319    231      219  14820.79909 #> 1320    231      227   2276.31681 #> 1321    232        2  37535.91284 #> 1322    232      206  25659.22153 #> 1323    232      219  27203.36633 #> 1324    232      227  14940.59717 #> 1325    232      267   9685.75872 #> 1326    232      309   4664.28472 #> 1327    233      202  41972.98224 #> 1328    233      203  13944.99224 #> 1329    233      220  29259.14447 #> 1330    233      235  42709.66244 #> 1331    233      236  20829.37879 #> 1332    234      204   7726.86126 #> 1333    234      228  41738.47100 #> 1334    234      230  29409.98816 #> 1335    234      235  47746.19215 #> 1336    234      237  15268.36788 #> 1337    235      202   5280.72402 #> 1338    235      204  27800.72753 #> 1339    235      223  25841.53350 #> 1340    235      226  17139.74034 #> 1341    235      233  42709.66244 #> 1342    235      234  47746.19215 #> 1343    235      236  36561.70779 #> 1344    235      237  11969.01436 #> 1345    236      203  39075.31242 #> 1346    236      207   5324.93857 #> 1347    236      226  17880.88933 #> 1348    236      233  20829.37879 #> 1349    236      235  36561.70779 #> 1350    237      122   2144.69093 #> 1351    237      202  32866.44699 #> 1352    237      217  43836.73108 #> 1353    237      230  38184.34724 #> 1354    237      234  15268.36788 #> 1355    237      235  11969.01436 #> 1356    237      323  27509.78176 #> 1357    238      254   7674.77909 #> 1358    238      261  10758.51702 #> 1359    238      265  25702.70903 #> 1360    238      272   2590.32633 #> 1361    238      273  23599.49639 #> 1362    238      274   2723.26612 #> 1363    238      282  53165.98898 #> 1364    239      246   2575.96499 #> 1365    239      256  19806.06333 #> 1366    239      269  17554.08486 #> 1367    239      276  23982.06829 #> 1368    240      167    112.59616 #> 1369    240      171  22906.83418 #> 1370    240      225  15047.65137 #> 1371    240      242  28468.02609 #> 1372    240      243  31813.17731 #> 1373    240      247   9820.11073 #> 1374    240      260   8393.26403 #> 1375    241      251  18531.90757 #> 1376    241      252  23058.43197 #> 1377    241      253  22558.84386 #> 1378    241      259  22071.71810 #> 1379    242      225  24158.07065 #> 1380    242      240  28468.02609 #> 1381    242      243   7433.14418 #> 1382    242      249  34495.28624 #> 1383    242      275  24775.66047 #> 1384    243      240  31813.17731 #> 1385    243      242   7433.14418 #> 1386    243      246  15515.40976 #> 1387    243      247   9567.40301 #> 1388    243      253   9276.48402 #> 1389    243      275  32778.82063 #> 1390    243      278  28515.21338 #> 1391    244      253  15309.76143 #> 1392    244      256  10690.29330 #> 1393    244      259  25637.94390 #> 1394    244      278  22684.21944 #> 1395    245      246  18014.81388 #> 1396    245      248  12198.94352 #> 1397    245      260  13268.86166 #> 1398    245      281  18495.24816 #> 1399    246      239   2575.96499 #> 1400    246      243  15515.40976 #> 1401    246      245  18014.81388 #> 1402    246      247  14512.78276 #> 1403    246      248   5833.42243 #> 1404    246      256  19561.24357 #> 1405    246      276   9669.84431 #> 1406    246      278   2802.32308 #> 1407    246      281   5872.86499 #> 1408    247      240   9820.11073 #> 1409    247      243   9567.40301 #> 1410    247      246  14512.78276 #> 1411    247      248  13354.60587 #> 1412    247      260  13668.43586 #> 1413    248      245  12198.94352 #> 1414    248      246   5833.42243 #> 1415    248      247  13354.60587 #> 1416    248      260  10026.32891 #> 1417    249      201  24294.06191 #> 1418    249      219  23194.06444 #> 1419    249      242  34495.28624 #> 1420    249      266  53980.48025 #> 1421    249      267  43818.46960 #> 1422    249      275   4823.39635 #> 1423    250      252   3874.59424 #> 1424    250      258  21221.73790 #> 1425    250      259  29066.41768 #> 1426    250      263   3007.89949 #> 1427    250      279   9773.76325 #> 1428    251      241  18531.90757 #> 1429    251      252   4980.55116 #> 1430    251      253  18691.02353 #> 1431    251      262   6816.14322 #> 1432    251      264  10702.24881 #> 1433    251      266  20334.14895 #> 1434    251      275  15913.31804 #> 1435    251      283  16128.17891 #> 1436    252      241  23058.43197 #> 1437    252      250   3874.59424 #> 1438    252      251   4980.55116 #> 1439    252      255   6850.99870 #> 1440    252      257   3999.93663 #> 1441    252      258  15341.04985 #> 1442    252      259   2302.96294 #> 1443    252      262  22093.56759 #> 1444    252      280  25638.92040 #> 1445    253      241  22558.84386 #> 1446    253      243   9276.48402 #> 1447    253      244  15309.76143 #> 1448    253      251  18691.02353 #> 1449    253      259   1136.31887 #> 1450    253      275  14205.67830 #> 1451    253      278   7974.07748 #> 1452    254      238   7674.77909 #> 1453    254      264   9688.99885 #> 1454    254      265  14747.76319 #> 1455    254      268  18838.88285 #> 1456    254      272  15691.79279 #> 1457    254      280  26350.75502 #> 1458    255      252   6850.99870 #> 1459    255      257  35359.36219 #> 1460    255      258  19764.02672 #> 1461    255      277  26216.44708 #> 1462    256      239  19806.06333 #> 1463    256      244  10690.29330 #> 1464    256      246  19561.24357 #> 1465    256      259   8188.76726 #> 1466    256      269   6948.00873 #> 1467    256      278  20510.37125 #> 1468    257      252   3999.93663 #> 1469    257      255  35359.36219 #> 1470    257      265  30486.52747 #> 1471    257      277   4428.79358 #> 1472    257      282  24871.94925 #> 1473    258      250  21221.73790 #> 1474    258      252  15341.04985 #> 1475    258      255  19764.02672 #> 1476    258      277   3054.71320 #> 1477    258      279  16268.46368 #> 1478    259      241  22071.71810 #> 1479    259      244  25637.94390 #> 1480    259      250  29066.41768 #> 1481    259      252   2302.96294 #> 1482    259      253   1136.31887 #> 1483    259      256   8188.76726 #> 1484    259      263  23484.48180 #> 1485    259      269  15760.49949 #> 1486    260      163  22151.34819 #> 1487    260      164  24240.08156 #> 1488    260      171   3696.63519 #> 1489    260      173  33005.38103 #> 1490    260      240   8393.26403 #> 1491    260      245  13268.86166 #> 1492    260      247  13668.43586 #> 1493    260      248  10026.32891 #> 1494    260      281  19075.87150 #> 1495    261      238  10758.51702 #> 1496    261      274   5212.10231 #> 1497    262      251   6816.14322 #> 1498    262      252  22093.56759 #> 1499    262      264  27104.47093 #> 1500    262      280  14547.53680 #> 1501    263      250   3007.89949 #> 1502    263      259  23484.48180 #> 1503    263      269  14194.18481 #> 1504    263      279  13201.97260 #> 1505    264      251  10702.24881 #> 1506    264      254   9688.99885 #> 1507    264      262  27104.47093 #> 1508    264      268   1706.51954 #> 1509    264      280   2829.33594 #> 1510    264      283   8488.70368 #> 1511    264      291  28860.74645 #> 1512    265      238  25702.70903 #> 1513    265      254  14747.76319 #> 1514    265      257  30486.52747 #> 1515    265      280  13507.19661 #> 1516    265      282   7008.38984 #> 1517    266      249  53980.48025 #> 1518    266      251  20334.14895 #> 1519    266      267  14311.66811 #> 1520    266      275  22543.65873 #> 1521    266      283  23939.93862 #> 1522    266      284  35250.02791 #> 1523    267      219  12798.48347 #> 1524    267      232   9685.75872 #> 1525    267      249  43818.46960 #> 1526    267      266  14311.66811 #> 1527    267      284   1983.47795 #> 1528    267      309  40000.81677 #> 1529    268      254  18838.88285 #> 1530    268      264   1706.51954 #> 1531    268      270   3628.86412 #> 1532    268      272  16144.52026 #> 1533    268      287   8289.86674 #> 1534    268      291  20878.95070 #> 1535    269      239  17554.08486 #> 1536    269      256   6948.00873 #> 1537    269      259  15760.49949 #> 1538    269      263  14194.18481 #> 1539    270      268   3628.86412 #> 1540    270      271   3488.63373 #> 1541    270      272  10130.81461 #> 1542    270      274   2595.09942 #> 1543    271      270   3488.63373 #> 1544    271      272   3555.42732 #> 1545    271      273   2125.35749 #> 1546    271      274   5064.37538 #> 1547    272      238   2590.32633 #> 1548    272      254  15691.79279 #> 1549    272      268  16144.52026 #> 1550    272      270  10130.81461 #> 1551    272      271   3555.42732 #> 1552    272      273  18961.91692 #> 1553    273      238  23599.49639 #> 1554    273      271   2125.35749 #> 1555    273      272  18961.91692 #> 1556    273      274  12148.33904 #> 1557    274      238   2723.26612 #> 1558    274      261   5212.10231 #> 1559    274      270   2595.09942 #> 1560    274      271   5064.37538 #> 1561    274      273  12148.33904 #> 1562    275      242  24775.66047 #> 1563    275      243  32778.82063 #> 1564    275      249   4823.39635 #> 1565    275      251  15913.31804 #> 1566    275      253  14205.67830 #> 1567    275      266  22543.65873 #> 1568    276      193  12898.62161 #> 1569    276      239  23982.06829 #> 1570    276      246   9669.84431 #> 1571    276      281  35512.66543 #> 1572    277      255  26216.44708 #> 1573    277      257   4428.79358 #> 1574    277      258   3054.71320 #> 1575    277      279   4303.15725 #> 1576    277      282   5971.25710 #> 1577    278      243  28515.21338 #> 1578    278      244  22684.21944 #> 1579    278      246   2802.32308 #> 1580    278      253   7974.07748 #> 1581    278      256  20510.37125 #> 1582    279      250   9773.76325 #> 1583    279      258  16268.46368 #> 1584    279      263  13201.97260 #> 1585    279      277   4303.15725 #> 1586    280      252  25638.92040 #> 1587    280      254  26350.75502 #> 1588    280      262  14547.53680 #> 1589    280      264   2829.33594 #> 1590    280      265  13507.19661 #> 1591    281      163   5101.81866 #> 1592    281      193  25664.72193 #> 1593    281      245  18495.24816 #> 1594    281      246   5872.86499 #> 1595    281      260  19075.87150 #> 1596    281      276  35512.66543 #> 1597    282      238  53165.98898 #> 1598    282      257  24871.94925 #> 1599    282      265   7008.38984 #> 1600    282      277   5971.25710 #> 1601    283      251  16128.17891 #> 1602    283      264   8488.70368 #> 1603    283      266  23939.93862 #> 1604    283      284  14716.27633 #> 1605    283      291  29857.39566 #> 1606    283      293  10572.64601 #> 1607    284      266  35250.02791 #> 1608    284      267   1983.47795 #> 1609    284      283  14716.27633 #> 1610    284      289   4308.39178 #> 1611    284      293  18563.84114 #> 1612    284      299  23770.32505 #> 1613    284      301  11951.10205 #> 1614    284      309  37819.13393 #> 1615    285      286   5515.57785 #> 1616    285      289   5957.45452 #> 1617    285      290   6269.13887 #> 1618    285      303   4973.75105 #> 1619    286      285   5515.57785 #> 1620    286      287  19441.71871 #> 1621    286      289   8863.99041 #> 1622    286      303  13318.31307 #> 1623    287      268   8289.86674 #> 1624    287      286  19441.71871 #> 1625    287      288  22343.59554 #> 1626    287      289     67.59646 #> 1627    287      291    740.79797 #> 1628    288      287  22343.59554 #> 1629    288      289   9466.52054 #> 1630    288      291   1286.13922 #> 1631    288      293  22338.35312 #> 1632    289      284   4308.39178 #> 1633    289      285   5957.45452 #> 1634    289      286   8863.99041 #> 1635    289      287     67.59646 #> 1636    289      288   9466.52054 #> 1637    289      290  20742.60111 #> 1638    289      293  20446.07424 #> 1639    289      299   1616.23190 #> 1640    290      285   6269.13887 #> 1641    290      289  20742.60111 #> 1642    290      299  10969.03248 #> 1643    290      303   2712.50943 #> 1644    290      305   4118.87441 #> 1645    290      306  11791.46077 #> 1646    290      307     73.95157 #> 1647    291      264  28860.74645 #> 1648    291      268  20878.95070 #> 1649    291      283  29857.39566 #> 1650    291      287    740.79797 #> 1651    291      288   1286.13922 #> 1652    291      293  31312.44450 #> 1653    292      294   1340.03742 #> 1654    292      295  31068.10609 #> 1655    292      296  30663.37895 #> 1656    292      301  34416.36852 #> 1657    292      309  31171.02969 #> 1658    293      283  10572.64601 #> 1659    293      284  18563.84114 #> 1660    293      288  22338.35312 #> 1661    293      289  20446.07424 #> 1662    293      291  31312.44450 #> 1663    294       19  22812.14749 #> 1664    294       34  17481.52544 #> 1665    294      292   1340.03742 #> 1666    294      295  26807.11288 #> 1667    294      296  31664.68878 #> 1668    295       34  26851.03706 #> 1669    295      292  31068.10609 #> 1670    295      294  26807.11288 #> 1671    295      301   2428.39154 #> 1672    296        1  70366.94961 #> 1673    296       19  24471.25064 #> 1674    296       35  15410.30599 #> 1675    296      292  30663.37895 #> 1676    296      294  31664.68878 #> 1677    297      298  17858.31810 #> 1678    297      301   6978.43644 #> 1679    297      302  14161.77754 #> 1680    297      304   3256.90100 #> 1681    298      297  17858.31810 #> 1682    298      299  18127.13596 #> 1683    298      300   4504.72291 #> 1684    298      302   5479.85294 #> 1685    298      304   6080.72949 #> 1686    298      305   3374.38490 #> 1687    299      284  23770.32505 #> 1688    299      289   1616.23190 #> 1689    299      290  10969.03248 #> 1690    299      298  18127.13596 #> 1691    299      300  22579.01600 #> 1692    299      301   6299.81092 #> 1693    299      305   1420.95774 #> 1694    300      298   4504.72291 #> 1695    300      299  22579.01600 #> 1696    300      301  18784.08698 #> 1697    300      302   5539.58236 #> 1698    301      284  11951.10205 #> 1699    301      292  34416.36852 #> 1700    301      295   2428.39154 #> 1701    301      297   6978.43644 #> 1702    301      299   6299.81092 #> 1703    301      300  18784.08698 #> 1704    301      302   6048.04341 #> 1705    301      309   5569.84264 #> 1706    302      297  14161.77754 #> 1707    302      298   5479.85294 #> 1708    302      300   5539.58236 #> 1709    302      301   6048.04341 #> 1710    303      285   4973.75105 #> 1711    303      286  13318.31307 #> 1712    303      290   2712.50943 #> 1713    303      307   7093.92933 #> 1714    303      308   7581.08298 #> 1715    304      297   3256.90100 #> 1716    304      298   6080.72949 #> 1717    304      305  15258.23792 #> 1718    304      308   1826.52256 #> 1719    305      290   4118.87441 #> 1720    305      298   3374.38490 #> 1721    305      299   1420.95774 #> 1722    305      304  15258.23792 #> 1723    305      306  18952.81070 #> 1724    305      308    779.15472 #> 1725    306      290  11791.46077 #> 1726    306      305  18952.81070 #> 1727    306      307  14111.57501 #> 1728    306      308    561.38069 #> 1729    307      290     73.95157 #> 1730    307      303   7093.92933 #> 1731    307      306  14111.57501 #> 1732    307      308   8708.70888 #> 1733    308      303   7581.08298 #> 1734    308      304   1826.52256 #> 1735    308      305    779.15472 #> 1736    308      306    561.38069 #> 1737    308      307   8708.70888 #> 1738    309        2  32757.87232 #> 1739    309      232   4664.28472 #> 1740    309      267  40000.81677 #> 1741    309      284  37819.13393 #> 1742    309      292  31171.02969 #> 1743    309      301   5569.84264 #> 1744    310       36  18763.97172 #> 1745    310       50  11544.87846 #> 1746    310      311  24582.74792 #> 1747    310      319  15396.67210 #> 1748    310      320  35351.04043 #> 1749    310      325  26654.51235 #> 1750    311       60   5408.51325 #> 1751    311      310  24582.74792 #> 1752    311      313  19324.53624 #> 1753    311      319  40581.42364 #> 1754    311      325  24271.64554 #> 1755    312      313  24801.45216 #> 1756    312      314  28598.81279 #> 1757    312      321   9611.81542 #> 1758    312      325  17317.59394 #> 1759    313      311  19324.53624 #> 1760    313      312  24801.45216 #> 1761    313      314  14421.36846 #> 1762    313      325   7950.68705 #> 1763    314      312  28598.81279 #> 1764    314      313  14421.36846 #> 1765    314      315  33662.59169 #> 1766    314      321  23999.59526 #> 1767    315      314  33662.59169 #> 1768    315      316  34600.43300 #> 1769    315      322  55513.32266 #> 1770    316      315  34600.43300 #> 1771    316      318  30965.91077 #> 1772    316      321  39646.52547 #> 1773    316      322   3572.38121 #> 1774    316      323   8460.71145 #> 1775    316      324  19296.05980 #> 1776    317      228  32057.94762 #> 1777    317      320  20276.01849 #> 1778    317      321  14618.81225 #> 1779    317      324  13922.21539 #> 1780    317      325  10150.37477 #> 1781    317      326  18251.86103 #> 1782    318      120  33848.77433 #> 1783    318      316  30965.91077 #> 1784    318      322  34315.74154 #> 1785    318      323  28274.85520 #> 1786    319       36  24583.90580 #> 1787    319       60  24774.01357 #> 1788    319      310  15396.67210 #> 1789    319      311  40581.42364 #> 1790    320       50  17021.42213 #> 1791    320      310  35351.04043 #> 1792    320      317  20276.01849 #> 1793    320      325  21612.65370 #> 1794    320      326  31192.28593 #> 1795    321      312   9611.81542 #> 1796    321      314  23999.59526 #> 1797    321      316  39646.52547 #> 1798    321      317  14618.81225 #> 1799    321      324  23593.41857 #> 1800    321      325  28406.17091 #> 1801    322      120  10654.32247 #> 1802    322      129  15898.85367 #> 1803    322      130  16776.61732 #> 1804    322      315  55513.32266 #> 1805    322      316   3572.38121 #> 1806    322      318  34315.74154 #> 1807    323      120  10520.49345 #> 1808    323      122  38806.17459 #> 1809    323      230  23017.67085 #> 1810    323      237  27509.78176 #> 1811    323      316   8460.71145 #> 1812    323      318  28274.85520 #> 1813    323      324  16530.06429 #> 1814    324      228  17020.92531 #> 1815    324      230  23192.01410 #> 1816    324      316  19296.05980 #> 1817    324      317  13922.21539 #> 1818    324      321  23593.41857 #> 1819    324      323  16530.06429 #> 1820    325      310  26654.51235 #> 1821    325      311  24271.64554 #> 1822    325      312  17317.59394 #> 1823    325      313   7950.68705 #> 1824    325      317  10150.37477 #> 1825    325      320  21612.65370 #> 1826    325      321  28406.17091 #> 1827    326       50  19203.38372 #> 1828    326       55  37489.60337 #> 1829    326      161  16555.99831 #> 1830    326      199  12067.60305 #> 1831    326      204  32462.64452 #> 1832    326      317  18251.86103 #> 1833    326      320  31192.28593"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/seg_dissim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Dissimilarity Index — seg_dissim","title":"Compute Dissimilarity Index — seg_dissim","text":"Compute Dissimilarity Index","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/seg_dissim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Dissimilarity Index — seg_dissim","text":"","code":"seg_dissim(plans, shp, group_pop, total_pop)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/seg_dissim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Dissimilarity Index — seg_dissim","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column group_pop unqouted name column shp group population total_pop unqouted name column shp total population","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/seg_dissim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Dissimilarity Index — seg_dissim","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/seg_dissim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Dissimilarity Index — seg_dissim","text":"","code":"data(nh) data(nh_m) # For a single plan: seg_dissim(plans = nh$r_2020, shp = nh, group_pop = vap_hisp, total_pop = vap) #> [1] 0.01085658 0.01085658  # Or many plans: seg_dissim(plans = nh_m[, 3:5], shp = nh, group_pop = vap_hisp, total_pop = vap) #> [1] 0.2278242 0.2278242 0.1902673 0.1902673 0.1330291 0.1330291"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Number of Administrative Units Split — splits_admin","title":"Compute Number of Administrative Units Split — splits_admin","text":"Compute Number Administrative Units Split","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Number of Administrative Units Split — splits_admin","text":"","code":"splits_admin(plans, shp, admin)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_admin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Number of Administrative Units Split — splits_admin","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column admin unqouted name column shp numeric identifiers administrative units","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_admin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Number of Administrative Units Split — splits_admin","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_admin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Number of Administrative Units Split — splits_admin","text":"","code":"data(nh) data(nh_m) # For a single plan: splits_admin(plans = nh$r_2020, shp = nh, admin = county) #> [1] 6 6  # Or many plans: splits_admin(plans = nh_m[, 3:5], shp = nh, admin = county) #> [1] 4 4 4 4 5 5"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the Number of Splits in Each Administrative Unit — splits_count","title":"Count the Number of Splits in Each Administrative Unit — splits_count","text":"Count Number Splits Administrative Unit","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the Number of Splits in Each Administrative Unit — splits_count","text":"","code":"splits_count(plans, shp, admin)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the Number of Splits in Each Administrative Unit — splits_count","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column admin unqouted name column shp numeric identifiers administrative units","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the Number of Splits in Each Administrative Unit — splits_count","text":"numeric matrix","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the Number of Splits in Each Administrative Unit — splits_count","text":"","code":"data(nh) data(nh_m) # For a single plan: splits_count(plans = nh$r_2020, shp = nh, admin = county) #>       [,1] #>  [1,]    1 #>  [2,]    2 #>  [3,]    1 #>  [4,]    1 #>  [5,]    2 #>  [6,]    2 #>  [7,]    2 #>  [8,]    2 #>  [9,]    2 #> [10,]    1  # Or many plans: splits_count(plans = nh_m[, 3:5], shp = nh, admin = county) #>       [,1] [,2] [,3] #>  [1,]    1    1    2 #>  [2,]    1    1    1 #>  [3,]    2    1    1 #>  [4,]    1    1    1 #>  [5,]    1    2    1 #>  [6,]    2    2    2 #>  [7,]    2    2    2 #>  [8,]    2    2    2 #>  [9,]    1    1    2 #> [10,]    1    1    1"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Number of Administrative Units Split More than Once — splits_multi","title":"Compute Number of Administrative Units Split More than Once — splits_multi","text":"Compute Number Administrative Units Split ","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Number of Administrative Units Split More than Once — splits_multi","text":"","code":"splits_multi(plans, shp, admin)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Number of Administrative Units Split More than Once — splits_multi","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column admin unqouted name column shp numeric identifiers administrative units","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Number of Administrative Units Split More than Once — splits_multi","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Number of Administrative Units Split More than Once — splits_multi","text":"","code":"data(nh) data(nh_m) # For a single plan: splits_multi(plans = nh$r_2020, shp = nh, admin = county) #> [1] 0 0  # Or many plans: splits_multi(plans = nh_m[, 3:5], shp = nh, admin = county) #> [1] 0 0 0 0 0 0"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_sub_admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Number of Sub-Administrative Units Split — splits_sub_admin","title":"Compute Number of Sub-Administrative Units Split — splits_sub_admin","text":"Compute Number Sub-Administrative Units Split","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_sub_admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Number of Sub-Administrative Units Split — splits_sub_admin","text":"","code":"splits_sub_admin(plans, shp, sub_admin)"},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_sub_admin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Number of Sub-Administrative Units Split — splits_sub_admin","text":"plans redist_plans object plans_matrix row indicates district assignment column plan shp redist_map object tibble sf geometry column sub_admin unqouted name column shp numeric identifiers subsidiary administrative units","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_sub_admin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Number of Sub-Administrative Units Split — splits_sub_admin","text":"numeric vector","code":""},{"path":"https://alarm-redist.github.io/redistmetrics/reference/splits_sub_admin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Number of Sub-Administrative Units Split — splits_sub_admin","text":"","code":"data(nh) data(nh_m) # For a single plan: splits_sub_admin(plans = nh$r_2020, shp = nh, sub_admin = county) #> [1] 6 6  # Or many plans: splits_sub_admin(plans = nh_m[, 3:5], shp = nh, sub_admin = county) #> [1] 4 4 4 4 5 5"}]
