// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// polsbypopper
NumericMatrix polsbypopper(IntegerVector from, IntegerVector to, NumericVector area, NumericVector perimeter, IntegerMatrix dm, int nd);
RcppExport SEXP _rict_polsbypopper(SEXP fromSEXP, SEXP toSEXP, SEXP areaSEXP, SEXP perimeterSEXP, SEXP dmSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type area(areaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type perimeter(perimeterSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(polsbypopper(from, to, area, perimeter, dm, nd));
    return rcpp_result_gen;
END_RCPP
}
// schwartzberg
NumericMatrix schwartzberg(IntegerVector from, IntegerVector to, NumericVector area, NumericVector perimeter, IntegerMatrix dm, int nd);
RcppExport SEXP _rict_schwartzberg(SEXP fromSEXP, SEXP toSEXP, SEXP areaSEXP, SEXP perimeterSEXP, SEXP dmSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type from(fromSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type to(toSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type area(areaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type perimeter(perimeterSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(schwartzberg(from, to, area, perimeter, dm, nd));
    return rcpp_result_gen;
END_RCPP
}
// talisman
NumericVector talisman(NumericMatrix dvs, double nd, double alpha, double beta);
RcppExport SEXP _rict_talisman(SEXP dvsSEXP, SEXP ndSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< double >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(talisman(dvs, nd, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// contiguity
IntegerVector contiguity(List adj, IntegerVector group);
RcppExport SEXP _rict_contiguity(SEXP adjSEXP, SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type group(groupSEXP);
    rcpp_result_gen = Rcpp::wrap(contiguity(adj, group));
    return rcpp_result_gen;
END_RCPP
}
// hamming
IntegerVector hamming(IntegerVector v, IntegerMatrix m);
RcppExport SEXP _rict_hamming(SEXP vSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(hamming(v, m));
    return rcpp_result_gen;
END_RCPP
}
// minkowski
NumericVector minkowski(IntegerVector v, IntegerMatrix m, int p);
RcppExport SEXP _rict_minkowski(SEXP vSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(minkowski(v, m, p));
    return rcpp_result_gen;
END_RCPP
}
// agg_p2d
IntegerMatrix agg_p2d(IntegerMatrix dm, IntegerVector vote, int nd);
RcppExport SEXP _rict_agg_p2d(SEXP dmSEXP, SEXP voteSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vote(voteSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(agg_p2d(dm, vote, nd));
    return rcpp_result_gen;
END_RCPP
}
// dseats
IntegerVector dseats(IntegerMatrix dm, IntegerMatrix dcounts, IntegerMatrix rcounts, int nd);
RcppExport SEXP _rict_dseats(SEXP dmSEXP, SEXP dcountsSEXP, SEXP rcountsSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type dcounts(dcountsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type rcounts(rcountsSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(dseats(dm, dcounts, rcounts, nd));
    return rcpp_result_gen;
END_RCPP
}
// dseatsDVS
IntegerVector dseatsDVS(NumericMatrix dvs);
RcppExport SEXP _rict_dseatsDVS(SEXP dvsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    rcpp_result_gen = Rcpp::wrap(dseatsDVS(dvs));
    return rcpp_result_gen;
END_RCPP
}
// DVS
NumericMatrix DVS(IntegerMatrix dcounts, IntegerMatrix rcounts);
RcppExport SEXP _rict_DVS(SEXP dcountsSEXP, SEXP rcountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dcounts(dcountsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type rcounts(rcountsSEXP);
    rcpp_result_gen = Rcpp::wrap(DVS(dcounts, rcounts));
    return rcpp_result_gen;
END_RCPP
}
// effgapEP
NumericVector effgapEP(NumericMatrix dvs, IntegerVector dseat_vec, int nd);
RcppExport SEXP _rict_effgapEP(SEXP dvsSEXP, SEXP dseat_vecSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dseat_vec(dseat_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(effgapEP(dvs, dseat_vec, nd));
    return rcpp_result_gen;
END_RCPP
}
// effgap
NumericVector effgap(IntegerMatrix dcounts, IntegerMatrix rcounts, int totvote);
RcppExport SEXP _rict_effgap(SEXP dcountsSEXP, SEXP rcountsSEXP, SEXP totvoteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dcounts(dcountsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type rcounts(rcountsSEXP);
    Rcpp::traits::input_parameter< int >::type totvote(totvoteSEXP);
    rcpp_result_gen = Rcpp::wrap(effgap(dcounts, rcounts, totvote));
    return rcpp_result_gen;
END_RCPP
}
// taugap
NumericVector taugap(double tau, NumericMatrix dvs, IntegerVector dseat_vec, int nd);
RcppExport SEXP _rict_taugap(SEXP tauSEXP, SEXP dvsSEXP, SEXP dseat_vecSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dseat_vec(dseat_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(taugap(tau, dvs, dseat_vec, nd));
    return rcpp_result_gen;
END_RCPP
}
// meanmedian
NumericVector meanmedian(NumericMatrix dvs);
RcppExport SEXP _rict_meanmedian(SEXP dvsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    rcpp_result_gen = Rcpp::wrap(meanmedian(dvs));
    return rcpp_result_gen;
END_RCPP
}
// bias
NumericVector bias(NumericMatrix dvs, int nd);
RcppExport SEXP _rict_bias(SEXP dvsSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(bias(dvs, nd));
    return rcpp_result_gen;
END_RCPP
}
// declination
NumericVector declination(NumericMatrix dvs, IntegerVector dseat_vec, int nd);
RcppExport SEXP _rict_declination(SEXP dvsSEXP, SEXP dseat_vecSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dseat_vec(dseat_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(declination(dvs, dseat_vec, nd));
    return rcpp_result_gen;
END_RCPP
}
// lopsidedwins
NumericVector lopsidedwins(NumericMatrix dvs, IntegerVector dseat_vec, int nd);
RcppExport SEXP _rict_lopsidedwins(SEXP dvsSEXP, SEXP dseat_vecSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type dseat_vec(dseat_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(lopsidedwins(dvs, dseat_vec, nd));
    return rcpp_result_gen;
END_RCPP
}
// responsiveness
NumericVector responsiveness(NumericMatrix dvs, double v, int nd, double bandwidth);
RcppExport SEXP _rict_responsiveness(SEXP dvsSEXP, SEXP vSEXP, SEXP ndSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    rcpp_result_gen = Rcpp::wrap(responsiveness(dvs, v, nd, bandwidth));
    return rcpp_result_gen;
END_RCPP
}
// biasatv
NumericVector biasatv(NumericMatrix dvs, double v, int nd);
RcppExport SEXP _rict_biasatv(SEXP dvsSEXP, SEXP vSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< double >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(biasatv(dvs, v, nd));
    return rcpp_result_gen;
END_RCPP
}
// RankedMarginalDev
NumericVector RankedMarginalDev(NumericMatrix dvs);
RcppExport SEXP _rict_RankedMarginalDev(SEXP dvsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    rcpp_result_gen = Rcpp::wrap(RankedMarginalDev(dvs));
    return rcpp_result_gen;
END_RCPP
}
// smoothseat
NumericVector smoothseat(NumericMatrix dvs, int nd);
RcppExport SEXP _rict_smoothseat(SEXP dvsSEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dvs(dvsSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(smoothseat(dvs, nd));
    return rcpp_result_gen;
END_RCPP
}
// segregationcalc
NumericVector segregationcalc(NumericMatrix distmat, NumericVector grouppop, NumericVector fullpop);
RcppExport SEXP _rict_segregationcalc(SEXP distmatSEXP, SEXP grouppopSEXP, SEXP fullpopSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type grouppop(grouppopSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type fullpop(fullpopSEXP);
    rcpp_result_gen = Rcpp::wrap(segregationcalc(distmat, grouppop, fullpop));
    return rcpp_result_gen;
END_RCPP
}
// splits
IntegerVector splits(IntegerMatrix dm, IntegerVector community, int nd, int max_split);
RcppExport SEXP _rict_splits(SEXP dmSEXP, SEXP communitySEXP, SEXP ndSEXP, SEXP max_splitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type community(communitySEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type max_split(max_splitSEXP);
    rcpp_result_gen = Rcpp::wrap(splits(dm, community, nd, max_split));
    return rcpp_result_gen;
END_RCPP
}
// dist_cty_splits
IntegerMatrix dist_cty_splits(IntegerMatrix dm, IntegerVector community, int nd);
RcppExport SEXP _rict_dist_cty_splits(SEXP dmSEXP, SEXP communitySEXP, SEXP ndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type community(communitySEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_cty_splits(dm, community, nd));
    return rcpp_result_gen;
END_RCPP
}
// var_info_mat
NumericVector var_info_mat(IntegerMatrix m, int i, NumericVector pop);
RcppExport SEXP _rict_var_info_mat(SEXP mSEXP, SEXP iSEXP, SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(var_info_mat(m, i, pop));
    return rcpp_result_gen;
END_RCPP
}
// var_info_vec
NumericVector var_info_vec(IntegerMatrix m, IntegerVector ref, NumericVector pop);
RcppExport SEXP _rict_var_info_vec(SEXP mSEXP, SEXP refSEXP, SEXP popSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ref(refSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pop(popSEXP);
    rcpp_result_gen = Rcpp::wrap(var_info_vec(m, ref, pop));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rict_polsbypopper", (DL_FUNC) &_rict_polsbypopper, 6},
    {"_rict_schwartzberg", (DL_FUNC) &_rict_schwartzberg, 6},
    {"_rict_talisman", (DL_FUNC) &_rict_talisman, 4},
    {"_rict_contiguity", (DL_FUNC) &_rict_contiguity, 2},
    {"_rict_hamming", (DL_FUNC) &_rict_hamming, 2},
    {"_rict_minkowski", (DL_FUNC) &_rict_minkowski, 3},
    {"_rict_agg_p2d", (DL_FUNC) &_rict_agg_p2d, 3},
    {"_rict_dseats", (DL_FUNC) &_rict_dseats, 4},
    {"_rict_dseatsDVS", (DL_FUNC) &_rict_dseatsDVS, 1},
    {"_rict_DVS", (DL_FUNC) &_rict_DVS, 2},
    {"_rict_effgapEP", (DL_FUNC) &_rict_effgapEP, 3},
    {"_rict_effgap", (DL_FUNC) &_rict_effgap, 3},
    {"_rict_taugap", (DL_FUNC) &_rict_taugap, 4},
    {"_rict_meanmedian", (DL_FUNC) &_rict_meanmedian, 1},
    {"_rict_bias", (DL_FUNC) &_rict_bias, 2},
    {"_rict_declination", (DL_FUNC) &_rict_declination, 3},
    {"_rict_lopsidedwins", (DL_FUNC) &_rict_lopsidedwins, 3},
    {"_rict_responsiveness", (DL_FUNC) &_rict_responsiveness, 4},
    {"_rict_biasatv", (DL_FUNC) &_rict_biasatv, 3},
    {"_rict_RankedMarginalDev", (DL_FUNC) &_rict_RankedMarginalDev, 1},
    {"_rict_smoothseat", (DL_FUNC) &_rict_smoothseat, 2},
    {"_rict_segregationcalc", (DL_FUNC) &_rict_segregationcalc, 3},
    {"_rict_splits", (DL_FUNC) &_rict_splits, 4},
    {"_rict_dist_cty_splits", (DL_FUNC) &_rict_dist_cty_splits, 3},
    {"_rict_var_info_mat", (DL_FUNC) &_rict_var_info_mat, 3},
    {"_rict_var_info_vec", (DL_FUNC) &_rict_var_info_vec, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rict(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
